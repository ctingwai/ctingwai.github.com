<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2013-10-09T16:38:09+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postfix mail relays]]></title>
    <link href="http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays/"/>
    <updated>2013-10-09T14:31:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays</id>
    <content type="html"><![CDATA[<p>Recently I have to setup a mail server to notify me of system failure from Nagios. So, instead of setting the mail server from scratch, I decided to use my company's email as a relay for notification.</p>

<!-- more -->


<p>Postfix are installed on most distros as the default MTA (Mail Transfer Agent). In cases where it is not installed, you can install by searching for postfix in your package manager, e.g. <code>sudo apt-cache search postfix</code>. Since, I am installing on a Ubuntu 12.04 machine, the instructions here lean more to Ubuntu systems, but it should work with other distros too. Configuration of mail server used to relay email from my Ubuntu machine: \</p>

<pre><code>Incoming server: smtp.domain.com (IMAP = Port 143, POP = Port 110)
Outgoing server: smtp.domain.com (SMTP = Port 587)
</code></pre>

<p>1. Add the following lines to <code>/etc/postfix/main.cnf</code>: \</p>

<pre><code># Settings for relay
relayhost = smtp.domain.com:587
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
smtp_sasl_security_options = noanonymous, noplaintext
smtp_sasl_mechanism_filter = login, plain
smtp_generic_maps = hash:/etc/postfix/generic 
</code></pre>

<p>2. Add the following lines to /etc/postfix/sasl/sasl_passwd: \</p>

<pre><code>[smtp.domain.com]:587 username:password
</code></pre>

<p>3. Generating sasl_passwd.db file by running the following command: \</p>

<pre><code>$ sudo postfix /etc/sasl/sasl\_passwd
</code></pre>

<p>4. Make sure that only root can read both file:</p>

<pre><code>$ sudo chmod 600 /etc/sasl/sasl\_passwd*
</code></pre>

<p>5. Restart postfix:</p>

<pre><code>$ sudo /etc/init.d/postfix restart
</code></pre>

<p>6. Send a test mail:</p>

<pre><code>echo "Testing" | mail -s "Test" email@address.com
</code></pre>

<p>You should receive your email in the address you sent above. If you are not getting an email, check the system mail, email failed to sent will get sent back to your own machine along with some error messages, you can check the system mail by using <code>cat /var/mail/root</code>. Note however, not all mail servers allow mail relays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing Multiple Tracks VCD on Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux/"/>
    <updated>2013-06-16T13:43:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux</id>
    <content type="html"><![CDATA[<p>I have bought a VCD movie recently to find that it was not playable on my OpenSUSE, CD2 works fine but not CD1. Then I go back for a replacement disc on the shop and came back to watch it but unfortunately, the problem persist. The problem is that CD1 comtains multiple tracks that most Mediaplayer doesn't support (tried VLC and Kaffeine). So I started to dive into the problems and found a thread that provides useful information on playing VCD on Linux (Refer to references).</p>

<!-- more -->


<p>Basically there are two ways to work around this problem:<br/>
1. Use MPlayer to play your disc<br/>
2. Rip your VCD using vcdxrip</p>

<h2>1. Use MPlayer to play your dics</h2>

<p>MPlayer was quite new to me actually, it is launched through the console, and it is does not appear in the menu. Here is the command to play VCD using MPlayer (install if you haven't already):</p>

<pre><code>mplayer vcd://&lt;track number&gt; -cdrom-device /dev/&lt;your cd rom device&gt;
</code></pre>

<p>Of course, you have to substitute <code>&lt;track number&gt;</code> and <code>&lt;your cd rom device&gt;</code> with the track number and your cd rom device. On my machine, it's on track 3 and my cd rom device is either dvd or sr0 (dvd is a symlink to sr0). So my complete command is:</p>

<pre><code>mplayer vcd://3 -cdrom-device /dev/sr0
</code></pre>

<p>Refer to mplayer's manpage for controls and details: <code>man mplayer</code>.</p>

<h2>2. Rip your VCD using vcdxrip</h2>

<p>This has not personally worked for me because it keeps stopping at certain points, it just doesn't copy the whole VCD. But it is still good to know if MPlayer does not work. The command is very easy and straight forward. Remember to change to a directory for your ripped files before executing this command:</p>

<pre><code>vcdxrip -C
</code></pre>

<p>And there will be multiple files present on your currect directory, where you could play using VLC or whatever media player you may wish.</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.mplayerhq.hu/DOCS/HTML/en/vcd.html">MPlayer with VCD</a></li>
<li><a href="http://forums.linuxmint.com/viewtopic.php?f=48&amp;t=43106">Forums discussing issues with VCDs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Juniper VPN on 64 bit Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux/"/>
    <updated>2013-05-18T18:21:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>When I was supporting a company that uses Juniper VPN with my colleague, I found that Juniper VPN is only supported in 32-bit version of Linux (though it was supported in 64-bit Windows and Mac machine, should ask them why they don't compile it for 64-bit Linux). I have spent hours finding solution to this situation and found one particular solution that just works. Tried <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a> but it didn't work for some unknown reasons.</p>

<!-- more -->


<p>This solution is based on <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a>, all credits goes to him/her.</p>

<h2>Requirements</h2>

<p>To use Juniper VPN, JRE or JDK with web plugins is a must (<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download Here</a>), it does not work with IcedTea and openJDK. We are not using any third party solution, so we have to comply to the Juniper VPN's system requirements.</p>

<h2>Steps</h2>

<p>1. Download Juniper VPN through the software provided by the company. Once the applet is loaded, it should ask you for your root/su password, just press [Enter] twice. It will create <code>.juniper_networks</code> in your home directory.<br/>
{% imgcap center /images/juniper-loading.png 'Juniper VPN Loading Screen' %}
{% imgcap center /images/juniper-pwdprompt.png 'Juniper VPN Password Prompt' %}</p>

<p>2. Change directory to <code>$HOME/.juniper_networks</code></p>

<pre><code>cd $HOME/.juniper_networks
</code></pre>

<p>3. Remove <code>network_connect</code> directory</p>

<pre><code>rm -rf network_connect
</code></pre>

<p>4. Extract <code>ncLinuxApp.jar</code></p>

<pre><code>unzip ncLinuxApp.jar
</code></pre>

<p>5. Use <code>ldd</code> to find out required libraries for <code>network_connect/libncui.so</code> and <code>zypper wp &lt;library&gt;</code> or <code>yum provides &lt;library&gt;</code> to find out the libraries.</p>

<p>6. Make a binary out of the library</p>

<pre><code>gcc -m32 -Wl,-rpath,`pwd` -o network_connect/ncui network_connect/libncui.so
</code></pre>

<p>7. Set permission and owner/group</p>

<pre><code>sudo chown root:root network_connect/ncui
sudo chmod 6711 network_connect/ncui
</code></pre>

<p>8. Get the certificate</p>

<pre><code>sh network_connect/ncui &lt;your Juniper VPN host&gt; &lt;certificatename&gt;.cer
</code></pre>

<p>9. Make sure that you are still logged into you VPN host, and find your DSID by browsing though your browser's cookie of your VPN site. Search for the cookie named DSID</p>

<p>10. Connect to Juniper VPN</p>

<pre><code>network_connect/ncui -h &lt;you Juniper VPN host&gt; -c DSID=&lt;value obtained in step 9&gt; -f &lt;certificate obtained in step 8&gt;.cer
</code></pre>

<p>11. (Optional) To ease future VPN connections, copy and paste the following script to <code>$HOME/bin/vpnConnect</code></p>

<pre><code>#!/bin/bash

if [ $# -lt 1 ]; then
        echo -e "Usage:\t$0 &lt;DSID&gt;"
        echo -e "\n\tNOTE: DSID can be found in the cookie after you logged into your VPN site"
        exit 0
fi

# Connect to your VPN
~/.juniper_networks/network_connect/ncui -h &lt;your vpn host&gt; -c DSID=$1 -f ~/.juniper_networks/&lt;cert from step 8&gt;.cer
</code></pre>

<p>12. (Continue step 11) Add executable bit <code>chmod +x $HOME/bin/vpnConnect</code></p>

<p>13. (To connect after step 12) Use <code>vpnConnect &lt;your DSID as in step 9&gt;</code> to connect</p>

<h2>Alternative ways for shortening</h2>

<p>Personally I prefer to use a script to shorten my commands, because it allow me to specify usage notes and comments when the usage is not right, but if you are not like me, you can use Linux aliases to shorten it, refer to <code>man alias</code> for usage or Google it =)</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a><br/>
2. <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Linux Power Usage]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage/"/>
    <updated>2013-05-17T22:54:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage</id>
    <content type="html"><![CDATA[<p>A lot of Linux distro is not optimised for laptops, some of them could use up much power if you don't optimize it. By the end of this guide, you should be able to reduce your power consumption by 3-5 watts, I know it seems not much but it can give my machine 15-30 mins more power. By default, my machine used up more than 24 watts of power, as indicated by <code>powertop</code>. To find out the power usage of your machine:</p>

<!-- more -->


<p>1. Unplug or switch off your AC to your laptop<br/>
2. Enter <code>sudo /usr/sbin/powertop</code> in a terminal<br/>
{% imgcap center /images/powertopOverview.png 'The left most column is my power consumption in watts' %}</p>

<p>To reduce the power consumption, I have installed <code>laptop-mode-tools</code>, as its name suggest, it is a tool for laptops. Once installed, I found that my wireless driver (<code>ath5k</code>) does not support power saving mode yet, so I have to disable it. Edit <code>/etc/laptop-mode/</code> and change <code>WIRELESS_BATT_POWER_SAVING=1 to WIRELESS_BATT_POWER_SAVING=0</code>, this step is optional, nothing might happen if you don't do anything to it.</p>

<p>To enable <code>laptop-mode</code>:</p>

<pre><code>$ sudo systemctl enable laptop-mode.service
</code></pre>

<p>Next, I created a custom script for <code>laptop-mode-tools</code> to enable certain power saving not included in <code>laptop-mode-tools</code> modules:</p>

<p>1. Edit <code>$HOME/bin/powersaving_on</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo low &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 1 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo Y &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 1500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>2. Edit <code>$HOME/bin/powersaving_off</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo default &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 2 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo N &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x $HOME/bin/powersaving_on; chmod +x $HOME/bin/powersaving_off
</code></pre>

<p>4. Create symbolic links for laptop-mode-tools:</p>

<pre><code>$ sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/batt-start/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/lm-ac-stop/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/batt-stop/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/lm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-stop/powersaving_off
</code></pre>

<p><strong>Explanation and Notes:</strong><br/>
<em>Step 1</em>: Enable some powersaving features to reduce power usage (require root permission), see the script's comments. You can change <code>echo low &gt; /sys/class/drm/card0/device/power_profile</code> to <code>echo mid &gt; /sys/class/drm/card0/device/power_profile</code> if you need more power</p>

<p><em>Step 2</em>: Disable powersaving features by setting all its values to default</p>

<p><em>Step 3</em>: Make both scripts executable</p>

<p><em>Step 4</em>: I have wrote it in a way that you can cut and paste into your terminal emulator in one step, just replace <code>&lt;username&gt;</code> with your username. <code>laptop-mode-tools</code> provide a way for users to execute certain scripts when on AC or battery by placing your scripts in its corresponding directories:</p>

<ul>
<li>/etc/laptop-mode/batt-start: Executed when laptop enters battery mode</li>
<li>/etc/laptop-mode/batt-stop: Executed when laptop exits battery mode</li>
<li>/etc/laptop-mode/lm-ac-start: Executed when <code>laptop-mode</code> is enabled AND laptop enters AC mode</li>
<li>/etc/laptop-mode/lm-ac-stop: Executed when <code>laptop-mode</code> is enabled AND laptop exits AC mode</li>
<li>/etc/laptop-mode/nolm-ac-start: Executed when <code>laptop-mode</code> is disabled through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop enters AC mode</li>
<li>/etc/laptop-mode/nolm-ac-stop: Executed when <code>laptop-mode</code> is disable through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop exits AC mode</li>
</ul>


<p><strong>Other Tips:</strong><br/>
1. Disable bluetooth: <code>sudo rfkill block bluetooth</code><br/>
2. It seems that monitor used up most power (11-18 watts depending on brightness on my machine), reduce brightness to save more power<br/>
3. Another power killer is WiFi, (more than 6 watts on my machine), so turn it off if you don't use it</p>

<p><strong>REFERENCES:</strong><br/>
1. <a href="https://wiki.archlinux.org/index.php/Power_saving">Great ArchWiki Article on Power Saving</a><br/>
2. <a href="http://aubreypwd.com/blog/2012/09/14/howto-ubuntu-12-04-open-source-radeon-drivers-and-power-management/">ATI Radeon Power Management Guide</a><br/>
3. <a href="http://www.linuxjournal.com/article/7539?page=0,1">Linux Journal Article on laptop-mode-tools</a><br/>
4. <a href="http://www.overclock.net/t/731469/how-to-power-saving-with-the-radeon-driver">Using ATI Radeon Power Management with laptop-mode-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S2ram as default suspending method]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method/"/>
    <updated>2013-05-12T23:45:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method</id>
    <content type="html"><![CDATA[<p>When I installed OpenSuSE 12.3 on my VAIO laptop, suspend is not working (not even <code>suspend</code> command). Instead, I have to issue <code>s2ram</code> command in OpenSuSE to suspend my machine. To make it the default sleep module (<code>uswsusp</code>), here are the steps required:</p>

<!-- more -->


<p>1. Edit <code>/etc/pm/config.d/module</code> and add the following line:</p>

<pre><code>SLEEP_MODULE=uswsusp
</code></pre>

<p>2. Edit <code>/etc/pm/config.d/defaults</code> and add the following line:</p>

<pre><code>S2RAM_OPTS="-f"
</code></pre>

<p>3. Reboot and it will go to sleep again.</p>

<p><strong>REFERENCES</strong><br/>
1. <a href="http://en.opensuse.org/SDB:Suspend_to_RAM">OpenSuSE Documentation</a><br/>
2. <a href="http://askubuntu.com/questions/54591/use-s2ram-when-closing-lid-with-kde">Ask Ubuntu Thread</a></p>
]]></content>
  </entry>
  
</feed>
