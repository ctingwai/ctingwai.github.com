<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2014-02-17T22:27:30+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bluetoothd crash on connect]]></title>
    <link href="http://ctingwai.github.com/blog/2014/02/17/bluetoothd-crash-on-connect/"/>
    <updated>2014-02-17T21:47:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2014/02/17/bluetoothd-crash-on-connect</id>
    <content type="html"><![CDATA[<p>I updated my Linux machine recently and the next thing I know is that bluetooth
keeps crashing with SIGSEGV. By following
<a href="https://wiki.archlinux.org/index.php/Step_By_Step_Debugging_Guide">this Archlinux wiki's</a>
strace method, I am able to find out that the crash is caused by nothing more
than some missing files.</p>

<!-- more -->


<p>All I had to do is removing my device in <code>/var/lib/bluetooth/</code> folder,
but for safety, I renamed it instead:</p>

<pre><code>mv /var/lib/bluetooth/00\:11\:22\:33\:44\:55 /var/lib/bluetooth/00\:11\:22\:33\:44\:55.bak
systemctl restart bluetooth
</code></pre>

<p>Make sure that you replace 00:11:22:33:44:55 with your bluetooth device
address, which should be in the directory <code>/var/lib/bluetooth/</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blueproximity for KDE4 Configuration]]></title>
    <link href="http://ctingwai.github.com/blog/2014/02/15/blueproximity-for-kde4/"/>
    <updated>2014-02-15T14:35:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2014/02/15/blueproximity-for-kde4</id>
    <content type="html"><![CDATA[<p>BlueProximity is a great addition to Linux, it adds a little of extra security
for you Linux machine. For those who don't know what it is, here's an excerpt
from BlueProximity:</p>

<p>{% blockquote BlueProximity http://blueproximity.sourceforge.net %}
This software helps you add a little more security to your desktop. It does so
by detecting one of your bluetooth devices, most likely your mobile phone, and
keeping track of its distance. If you move away from your computer and the
distance is above a certain level (no measurement in meters is possible) for a
given time, it automatically locks your desktop (or starts any other shell
command you want).</p>

<p>Once away your computer awaits its master back - if you are nearer than a given
level for a set time your computer unlocks magically without any interaction
(or starts any other shell command you want).
{% endblockquote %}</p>

<!-- more -->


<p>The problem I found when configuring BlueProximity on my Linux machine is the
commands, if you are on Gnome, nearly no configuration is needed, but I am on
KDE 4.x. So, here's the command I used to get it working on my machine:</p>

<ul>
<li>Lock command: <code>qdbus-qt4 org.kde.screensaver /ScreenSaver Lock</code></li>
<li>Unlock command: <code>qdbus-qt4 | grep kscreenlocker_greet | xargs -I {} qdbus-qt4 {} /MainApplication quit</code></li>
<li>Proximity command: <code>qdbus-qt4 org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity</code></li>
</ul>


<p>If you are not using <code>qdbus-qt4</code>, substitute it with <code>qdbus</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postfix mail relays]]></title>
    <link href="http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays/"/>
    <updated>2013-10-09T14:31:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays</id>
    <content type="html"><![CDATA[<p>Recently I have to setup a mail server to notify me of system failure from Nagios. So, instead of setting the mail server from scratch, I decided to use my company's email as a relay for notification.</p>

<!-- more -->


<p>Postfix are installed on most distros as the default MTA (Mail Transfer Agent). In cases where it is not installed, you can install by searching for postfix in your package manager, e.g. <code>sudo apt-cache search postfix</code>. Since, I am installing on a Ubuntu 12.04 machine, the instructions here lean more to Ubuntu systems, but it should work with other distros too. Configuration of mail server used to relay email from my Ubuntu machine: \</p>

<pre><code>Incoming server: smtp.domain.com (IMAP = Port 143, POP = Port 110)
Outgoing server: smtp.domain.com (SMTP = Port 587)
</code></pre>

<p>1. Add the following lines to <code>/etc/postfix/main.cnf</code>: \</p>

<pre><code># Settings for relay
relayhost = smtp.domain.com:587
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
smtp_sasl_security_options = noanonymous, noplaintext
smtp_sasl_mechanism_filter = login, plain
smtp_generic_maps = hash:/etc/postfix/generic 
</code></pre>

<p>2. Add the following lines to /etc/postfix/sasl/sasl_passwd: \</p>

<pre><code>[smtp.domain.com]:587 username:password
</code></pre>

<p>3. Generating sasl_passwd.db file by running the following command: \</p>

<pre><code>$ sudo postfix /etc/sasl/sasl\_passwd
</code></pre>

<p>4. Make sure that only root can read both file:</p>

<pre><code>$ sudo chmod 600 /etc/sasl/sasl\_passwd*
</code></pre>

<p>5. Restart postfix:</p>

<pre><code>$ sudo /etc/init.d/postfix restart
</code></pre>

<p>6. Send a test mail:</p>

<pre><code>echo "Testing" | mail -s "Test" email@address.com
</code></pre>

<p>You should receive your email in the address you sent above. If you are not getting an email, check the system mail, email failed to sent will get sent back to your own machine along with some error messages, you can check the system mail by using <code>cat /var/mail/root</code>. Note however, not all mail servers allow mail relays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing Multiple Tracks VCD on Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux/"/>
    <updated>2013-06-16T13:43:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux</id>
    <content type="html"><![CDATA[<p>I have bought a VCD movie recently to find that it was not playable on my OpenSUSE, CD2 works fine but not CD1. Then I go back for a replacement disc on the shop and came back to watch it but unfortunately, the problem persist. The problem is that CD1 comtains multiple tracks that most Mediaplayer doesn't support (tried VLC and Kaffeine). So I started to dive into the problems and found a thread that provides useful information on playing VCD on Linux (Refer to references).</p>

<!-- more -->


<p>Basically there are two ways to work around this problem:<br/>
1. Use MPlayer to play your disc<br/>
2. Rip your VCD using vcdxrip</p>

<h2>1. Use MPlayer to play your dics</h2>

<p>MPlayer was quite new to me actually, it is launched through the console, and it is does not appear in the menu. Here is the command to play VCD using MPlayer (install if you haven't already):</p>

<pre><code>mplayer vcd://&lt;track number&gt; -cdrom-device /dev/&lt;your cd rom device&gt;
</code></pre>

<p>Of course, you have to substitute <code>&lt;track number&gt;</code> and <code>&lt;your cd rom device&gt;</code> with the track number and your cd rom device. On my machine, it's on track 3 and my cd rom device is either dvd or sr0 (dvd is a symlink to sr0). So my complete command is:</p>

<pre><code>mplayer vcd://3 -cdrom-device /dev/sr0
</code></pre>

<p>Refer to mplayer's manpage for controls and details: <code>man mplayer</code>.</p>

<h2>2. Rip your VCD using vcdxrip</h2>

<p>This has not personally worked for me because it keeps stopping at certain points, it just doesn't copy the whole VCD. But it is still good to know if MPlayer does not work. The command is very easy and straight forward. Remember to change to a directory for your ripped files before executing this command:</p>

<pre><code>vcdxrip -C
</code></pre>

<p>And there will be multiple files present on your currect directory, where you could play using VLC or whatever media player you may wish.</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.mplayerhq.hu/DOCS/HTML/en/vcd.html">MPlayer with VCD</a></li>
<li><a href="http://forums.linuxmint.com/viewtopic.php?f=48&amp;t=43106">Forums discussing issues with VCDs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Juniper VPN on 64 bit Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux/"/>
    <updated>2013-05-18T18:21:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>When I was supporting a company that uses Juniper VPN with my colleague, I found that Juniper VPN is only supported in 32-bit version of Linux (though it was supported in 64-bit Windows and Mac machine, should ask them why they don't compile it for 64-bit Linux). I have spent hours finding solution to this situation and found one particular solution that just works. Tried <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a> but it didn't work for some unknown reasons.</p>

<!-- more -->


<p>This solution is based on <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a>, all credits goes to him/her.</p>

<h2>Requirements</h2>

<p>To use Juniper VPN, JRE or JDK with web plugins is a must (<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download Here</a>), it does not work with IcedTea and openJDK. We are not using any third party solution, so we have to comply to the Juniper VPN's system requirements.</p>

<h2>Steps</h2>

<p>1. Download Juniper VPN through the software provided by the company. Once the applet is loaded, it should ask you for your root/su password, just press [Enter] twice. It will create <code>.juniper_networks</code> in your home directory.<br/>
{% imgcap center /images/juniper-loading.png 'Juniper VPN Loading Screen' %}
{% imgcap center /images/juniper-pwdprompt.png 'Juniper VPN Password Prompt' %}</p>

<p>2. Change directory to <code>$HOME/.juniper_networks</code></p>

<pre><code>cd $HOME/.juniper_networks
</code></pre>

<p>3. Remove <code>network_connect</code> directory</p>

<pre><code>rm -rf network_connect
</code></pre>

<p>4. Extract <code>ncLinuxApp.jar</code></p>

<pre><code>unzip ncLinuxApp.jar
</code></pre>

<p>5. Use <code>ldd</code> to find out required libraries for <code>network_connect/libncui.so</code> and <code>zypper wp &lt;library&gt;</code> or <code>yum provides &lt;library&gt;</code> to find out the libraries.</p>

<p>6. Make a binary out of the library</p>

<pre><code>gcc -m32 -Wl,-rpath,`pwd` -o network_connect/ncui network_connect/libncui.so
</code></pre>

<p>7. Set permission and owner/group</p>

<pre><code>sudo chown root:root network_connect/ncui
sudo chmod 6711 network_connect/ncui
</code></pre>

<p>8. Get the certificate</p>

<pre><code>sh network_connect/ncui &lt;your Juniper VPN host&gt; &lt;certificatename&gt;.cer
</code></pre>

<p>9. Make sure that you are still logged into you VPN host, and find your DSID by browsing though your browser's cookie of your VPN site. Search for the cookie named DSID</p>

<p>10. Connect to Juniper VPN</p>

<pre><code>network_connect/ncui -h &lt;you Juniper VPN host&gt; -c DSID=&lt;value obtained in step 9&gt; -f &lt;certificate obtained in step 8&gt;.cer
</code></pre>

<p>11. (Optional) To ease future VPN connections, copy and paste the following script to <code>$HOME/bin/vpnConnect</code></p>

<pre><code>#!/bin/bash

if [ $# -lt 1 ]; then
        echo -e "Usage:\t$0 &lt;DSID&gt;"
        echo -e "\n\tNOTE: DSID can be found in the cookie after you logged into your VPN site"
        exit 0
fi

# Connect to your VPN
~/.juniper_networks/network_connect/ncui -h &lt;your vpn host&gt; -c DSID=$1 -f ~/.juniper_networks/&lt;cert from step 8&gt;.cer
</code></pre>

<p>12. (Continue step 11) Add executable bit <code>chmod +x $HOME/bin/vpnConnect</code></p>

<p>13. (To connect after step 12) Use <code>vpnConnect &lt;your DSID as in step 9&gt;</code> to connect</p>

<h2>Alternative ways for shortening</h2>

<p>Personally I prefer to use a script to shorten my commands, because it allow me to specify usage notes and comments when the usage is not right, but if you are not like me, you can use Linux aliases to shorten it, refer to <code>man alias</code> for usage or Google it =)</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a><br/>
2. <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a></p>
]]></content>
  </entry>
  
</feed>
