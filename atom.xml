<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2014-03-19T14:34:19+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Access Router Web Management Interface Remotely Through SSH]]></title>
    <link href="http://ctingwai.github.com/blog/2014/03/19/access-router-web-management-interface-remotely-through-ssh/"/>
    <updated>2014-03-19T14:01:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2014/03/19/access-router-web-management-interface-remotely-through-ssh</id>
    <content type="html"><![CDATA[<p>As an administrator for multiple Linux servers in various location, I find it
hard to manage port forwarding in routers, of course you can configure a
remote GUI login such as RDP and VNC but all these servers only enable
services they need with SSH as their main method of remote administration
to these servers. Then, I found out about SSH tunneling, which is a lifesaver.
There are two main method to tunnel traffic through SSH:</p>

<ol>
<li><a href="http://superuser.com/questions/330131/ssh-tunnel-to-home-network-and-access-router-web-interface">Forward a single port through SSH</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Secure_Shell#Encrypted_SOCKS_tunnel">Tunneling through SOCKS</a></li>
</ol>


<!-- more -->


<p>The first method is good for temporary tunneling and the second method is good
for when you want to encrypt your traffic. So, I think first method is more
suitable to my case, but you are free to use the second method as well.</p>

<h2>Method 1: Forward a single port through SSH</h2>

<p>Make sure you know your router IP before you run SSH command, you can just SSH
into your remote machine to get the default using <code>route</code> command. After you
know your remote router IP, you can configure your tunnel using <code>ssh</code> command:</p>

<pre><code>ssh -p [remote ssh port if changed] -L8080:[remote router IP]:80 [username]@[host]
</code></pre>

<p>Make sure that you fill in those variables in square brackets. After entering
your user password, you can open your browser and access your router web management
through <code>127.0.0.1:8080</code>. Make sure that your firewall/iptables are not blocking port 8080.</p>

<h2>Method 2: Tunneling through SOCKS</h2>

<p>This method forward ports according to the port you specified in your browser
or application. However, it is more complex and usually used to encrypt your
traffic. You create a SOCKS tunnel using <code>ssh</code> command:</p>

<pre><code>ssh -TND 4711 [username]@[host]
</code></pre>

<p>Make sure that you fill in those variables in square brackets. After entering
your user password, you need to configure your browser to use SOCKS proxy, you
can find more information on how to configure web browser for SOCKS proxy
<a href="https://wiki.archlinux.org/index.php/Secure_Shell#Encrypted_SOCKS_tunnel">here</a>.
Once configured, you need to enter the router&#8217;s IP to access the router&#8217;s web
management interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bluetoothd crash on connect]]></title>
    <link href="http://ctingwai.github.com/blog/2014/02/17/bluetoothd-crash-on-connect/"/>
    <updated>2014-02-17T21:47:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2014/02/17/bluetoothd-crash-on-connect</id>
    <content type="html"><![CDATA[<p>I updated my Linux machine recently and the next thing I know is that bluetooth
keeps crashing with SIGSEGV. By following
<a href="https://wiki.archlinux.org/index.php/Step_By_Step_Debugging_Guide">this Archlinux wiki&#8217;s</a>
strace method, I am able to find out that the crash is caused by nothing more
than some missing files.</p>

<!-- more -->


<p>All I had to do is removing my device in <code>/var/lib/bluetooth/</code> folder,
but for safety, I renamed it instead:</p>

<pre><code>mv /var/lib/bluetooth/00\:11\:22\:33\:44\:55 /var/lib/bluetooth/00\:11\:22\:33\:44\:55.bak
systemctl restart bluetooth
</code></pre>

<p>Make sure that you replace 00:11:22:33:44:55 with your bluetooth device
address, which should be in the directory <code>/var/lib/bluetooth/</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blueproximity for KDE4 Configuration]]></title>
    <link href="http://ctingwai.github.com/blog/2014/02/15/blueproximity-for-kde4/"/>
    <updated>2014-02-15T14:35:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2014/02/15/blueproximity-for-kde4</id>
    <content type="html"><![CDATA[<p>BlueProximity is a great addition to Linux, it adds a little of extra security
for you Linux machine. For those who don&#8217;t know what it is, here&#8217;s an excerpt
from BlueProximity:</p>

<blockquote><p>This software helps you add a little more security to your desktop. It does so<br/>by detecting one of your bluetooth devices, most likely your mobile phone, and<br/>keeping track of its distance. If you move away from your computer and the<br/>distance is above a certain level (no measurement in meters is possible) for a<br/>given time, it automatically locks your desktop (or starts any other shell<br/>command you want).</p><p>Once away your computer awaits its master back - if you are nearer than a given<br/>level for a set time your computer unlocks magically without any interaction<br/>(or starts any other shell command you want).</p><footer><strong>BlueProximity</strong> <cite><a href='http://blueproximity.sourceforge.net'>blueproximity.sourceforge.net/&hellip;</a></cite></footer></blockquote>


<!-- more -->


<p>The problem I found when configuring BlueProximity on my Linux machine is the
commands, if you are on Gnome, nearly no configuration is needed, but I am on
KDE 4.x. So, here&#8217;s the command I used to get it working on my machine:</p>

<ul>
<li>Lock command: <code>qdbus-qt4 org.kde.screensaver /ScreenSaver Lock</code></li>
<li>Unlock command: <code>qdbus-qt4 | grep kscreenlocker_greet | xargs -I {} qdbus-qt4 {} /MainApplication quit</code></li>
<li>Proximity command: <code>qdbus-qt4 org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity</code></li>
</ul>


<p>If you are not using <code>qdbus-qt4</code>, substitute it with <code>qdbus</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Class Design for MySQL?]]></title>
    <link href="http://ctingwai.github.com/blog/2013/10/09/php-class-design-for-mysql/"/>
    <updated>2013-10-09T15:24:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/10/09/php-class-design-for-mysql</id>
    <content type="html"><![CDATA[<p>Since I first started out my journey on PHP, I have been trying to find a good design to make coding less messy when using MySQL.
Anyone use PHP knows that mixing PHP and MySQL together makes the code less readable and less modifiable, worse, it makes debugging
much harder. These situations would only get worse if you don&#8217;t refactor your code. So, here is my solution for PHP (sure, it is
applicable in any language), using an abstract class as the base class for all records:</p>

<!-- more -->




<figure class='code'><figcaption><span>Record </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
<span class='line-number'>442</span>
<span class='line-number'>443</span>
<span class='line-number'>444</span>
<span class='line-number'>445</span>
<span class='line-number'>446</span>
<span class='line-number'>447</span>
<span class='line-number'>448</span>
<span class='line-number'>449</span>
<span class='line-number'>450</span>
<span class='line-number'>451</span>
<span class='line-number'>452</span>
<span class='line-number'>453</span>
<span class='line-number'>454</span>
<span class='line-number'>455</span>
<span class='line-number'>456</span>
<span class='line-number'>457</span>
<span class='line-number'>458</span>
<span class='line-number'>459</span>
<span class='line-number'>460</span>
<span class='line-number'>461</span>
<span class='line-number'>462</span>
<span class='line-number'>463</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>abstract class Record{
</span><span class='line'>    //The tables where the operation will take place
</span><span class='line'>    const UPDATE_TABLE = 0; //The table where the record to be updated
</span><span class='line'>    const DELETE_TABLE = 1; //The table where the record to be deleted
</span><span class='line'>
</span><span class='line'>    //Operations against the table/s
</span><span class='line'>    const OP_DELETE = 'delete_record';
</span><span class='line'>    const OP_UPDATE = 'update_record';
</span><span class='line'>    const OP_CREATE = 'create_record';
</span><span class='line'>    const OP_READ = 'read_record';
</span><span class='line'>
</span><span class='line'>    //For type checking
</span><span class='line'>    const TYPE_STRING = 'string';
</span><span class='line'>    const TYPE_BOOL = 'boolean';
</span><span class='line'>    const TYPE_INT = 'integer';
</span><span class='line'>    const TYPE_DOUBLE = 'double';
</span><span class='line'>    const TYPE_ARRAY = 'array';
</span><span class='line'>    const TYPE_OBJECT = 'object';
</span><span class='line'>    const TYPE_RESOURCE = 'resource';
</span><span class='line'>    const TYPE_NULL = 'NULL';
</span><span class='line'>    const TYPE_UNKNOWN = 'unknown type';
</span><span class='line'>
</span><span class='line'>    //Log types for log4php
</span><span class='line'>    const LOG_TYPE_WARN = "WARN";
</span><span class='line'>    const LOG_TYPE_INFO = "INFO";
</span><span class='line'>    const LOG_TYPE_DEBUG = "DEBUG";
</span><span class='line'>
</span><span class='line'>    const ID = 'id';
</span><span class='line'>    
</span><span class='line'>    protected $logger;
</span><span class='line'>    protected $connection;
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Constructor
</span><span class='line'>     * @param connection MySQLi object used to connect to MySQL database
</span><span class='line'>     * @param hostname The hostname of the server
</span><span class='line'>     * @param username The username to connect to MySQL
</span><span class='line'>     * @param passwd The password to connect to MySQL
</span><span class='line'>     * @param dbname The database name of MySQL to use
</span><span class='line'>     */
</span><span class='line'>    function __construct(mysqli $connection = null,
</span><span class='line'>                         $hostname = "localhost",
</span><span class='line'>                         $username = "root",
</span><span class='line'>                         $passwd = "",
</span><span class='line'>                         $dbname = "purchase_order"){
</span><span class='line'>        if($connection === null)
</span><span class='line'>            $this->connection = new mysqli($hostname, $username,
</span><span class='line'>                                           $passwd, $dbname);
</span><span class='line'>        else
</span><span class='line'>            $this->connection = $connection;
</span><span class='line'>
</span><span class='line'>        $this->connection->set_charset('utf8');
</span><span class='line'>
</span><span class='line'>        $this->logger = null;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Set the logger for log4php
</span><span class='line'>     * @param logger The logger used for loggin
</span><span class='line'>     */
</span><span class='line'>    function setLogger($logger = null){
</span><span class='line'>        $this->logger = $logger;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Get the connection for the database
</span><span class='line'>     */
</span><span class='line'>    public function getConnection(){
</span><span class='line'>        return $this->connection;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Get the connection error description
</span><span class='line'>     * @return The error for the connection
</span><span class='line'>     */
</span><span class='line'>    public function error(){
</span><span class='line'>        return $this->connection->error;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *RETRIEVE
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Custom query without escapes, escape your values before passing into
</span><span class='line'>     * this function
</span><span class='line'>     * @param fields MySQL fields comma separated
</span><span class='line'>     * @param tbl MySQL table comma separated
</span><span class='line'>     * @param condition Full MySQL conditions without 'WHERE' keyword
</span><span class='line'>     f @param additional An additional MySQL queries, have to be in MySQL
</span><span class='line'>     * @return Associative array of results or null on failure
</span><span class='line'>     */
</span><span class='line'>    public function select($fields = null, $tbl = null, $condition = null,
</span><span class='line'>                           $additional = null){
</span><span class='line'>        if(!$this->isValidValues(array($fields, $tbl), self::TYPE_STRING))
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $sql = "SELECT $fields FROM $tbl";
</span><span class='line'>
</span><span class='line'>        $authCond = null;
</span><span class='line'>        $auth = $this->isAuthorized(self::OP_READ, $authCond);
</span><span class='line'>        if(!$auth){
</span><span class='line'>            $this->log('Unauthorized read access!', self::LOG_TYPE_WARN);
</span><span class='line'>            return null;
</span><span class='line'>        }else if($auth && $authCond != null)
</span><span class='line'>            $sql .= " WHERE $authCond";
</span><span class='line'>
</span><span class='line'>        if($condition != null){
</span><span class='line'>            if($authCond != null)
</span><span class='line'>                $sql .= " AND $condition $additional";
</span><span class='line'>            else
</span><span class='line'>                $sql .= " WHERE $condition $additional";
</span><span class='line'>        }else
</span><span class='line'>            $sql .= " $additional";
</span><span class='line'>        $this->log("Executing SQL: $sql", self::LOG_TYPE_DEBUG);
</span><span class='line'>
</span><span class='line'>        $query = $this->connection->query($sql);
</span><span class='line'>        if($query){
</span><span class='line'>            $result = $this->fetchAllAssoc($query);
</span><span class='line'>            $query->close();
</span><span class='line'>            $this->log("Query success: Fetched ". count($result)."rows",
</span><span class='line'>                        self::LOG_TYPE_DEBUG);
</span><span class='line'>
</span><span class='line'>            return $result;
</span><span class='line'>        }else
</span><span class='line'>            $this->log("Query failed: ". $this->error(), self::LOG_TYPE_WARN);
</span><span class='line'>
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Get all records with starting records and number of records
</span><span class='line'>     * @param start The starting record, default 0
</span><span class='line'>     * @param count The number of records, set to 0 to list all, default 0
</span><span class='line'>     * @return An associative array based on field name as keys or null on
</span><span class='line'>     * failure
</span><span class='line'>     */
</span><span class='line'>    public function getAll($start = 0, $count = 0){
</span><span class='line'>        $this->log('Retrieving all records', self::LOG_TYPE_INFO);
</span><span class='line'>        $fields = null;
</span><span class='line'>        $tables = null;
</span><span class='line'>        $conditions = null;
</span><span class='line'>
</span><span class='line'>        $this->getAllQueryStatements($fields, $tables, $conditions);
</span><span class='line'>
</span><span class='line'>        if(!$this->isValidValues(array($fields, $tables), self::TYPE_STRING))
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        if($count != 0)
</span><span class='line'>            return $this->select($fields, $tables, $conditions, "LIMIT $start,
</span><span class='line'>                                 $count");
</span><span class='line'>        else
</span><span class='line'>            return $this->select($fields, $tables, $conditions);
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *CREATE
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Insert a record
</span><span class='line'>     * @param fields The fields to be inserted
</span><span class='line'>     * @return True on success, null on failure
</span><span class='line'>     */
</span><span class='line'>    public function insert(array $fields = null){}
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *UPDATE
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Updates a record, using template method.
</span><span class='line'>     * At least the 'id' key has to be set.
</span><span class='line'>     * @param fields The field/s to be updated
</span><span class='line'>     * @see subclass::getUpdateColumns()
</span><span class='line'>     */
</span><span class='line'>    public function update(array $fields = null){
</span><span class='line'>        $this->log('Updating record', self::LOG_TYPE_INFO);
</span><span class='line'>
</span><span class='line'>        //Authorization
</span><span class='line'>        $authCond = null;
</span><span class='line'>        if(!$this->isAuthorized(self::OP_UPDATE, $authCond)){
</span><span class='line'>            $this->log('Unauthorized update!', self::LOG_TYPE_WARN);
</span><span class='line'>            return null;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        $table = $this->getTableName(self::UPDATE_TABLE);
</span><span class='line'>        $columns = $this->getUpdateColumns($fields, $table);
</span><span class='line'>
</span><span class='line'>        if($fields === null || !$this->validKeys(array(self::ID), $fields))
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $this->preUpdate($fields[self::ID]);
</span><span class='line'>
</span><span class='line'>        $result = null;
</span><span class='line'>        if($table && count($columns) > 0){
</span><span class='line'>            $sql = "UPDATE " . $table . " SET ";
</span><span class='line'>            $count = count($columns);
</span><span class='line'>            if(isset($columns['conditions']))
</span><span class='line'>                $count = count($columns) - 1;
</span><span class='line'>            for($i = 0; $i &lt; $count; $i++){
</span><span class='line'>                $sql .= $columns[$i];
</span><span class='line'>                if($i &lt; $count -1)
</span><span class='line'>                    $sql .= ", "; //Insert comma if not last element
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            if(!isset($columns['conditions']))
</span><span class='line'>                $sql .= " WHERE id=" . $fields[self::ID];
</span><span class='line'>            else
</span><span class='line'>                $sql .= ' WHERE '. $columns['conditions'];
</span><span class='line'>
</span><span class='line'>            if($authCond != null)
</span><span class='line'>                $sql .= " AND $authCond";
</span><span class='line'>
</span><span class='line'>            $this->log("Executing SQL: $sql", self::LOG_TYPE_DEBUG);
</span><span class='line'>
</span><span class='line'>            $result = $this->connection->query($sql);
</span><span class='line'>            if(!$result){
</span><span class='line'>                $this->log("SQL statement failed: ". $this->error(),
</span><span class='line'>                                    self::LOG_TYPE_WARN);
</span><span class='line'>                $result = null;
</span><span class='line'>            }else{
</span><span class='line'>                $this->log('SQL execution successful!',
</span><span class='line'>                            self::LOG_TYPE_INFO);
</span><span class='line'>                $result = $fields['id'];
</span><span class='line'>            }
</span><span class='line'>        }else if($table === '' || $table === null){
</span><span class='line'>            $this->log('Invalid table name for update!',
</span><span class='line'>                        self::LOG_TYPE_WARN);
</span><span class='line'>            $result = null;
</span><span class='line'>        }else if(count($columns) &lt;= 0){
</span><span class='line'>            $this->log('No columns returned!', self::LOG_TYPE_WARN);
</span><span class='line'>            $result = null;
</span><span class='line'>        }else
</span><span class='line'>            $this->log('An unknown mutant error has occured! Arghh!!',
</span><span class='line'>                        self::LOG_TYPE_WARN);
</span><span class='line'>
</span><span class='line'>        $this->postUpdate($result);
</span><span class='line'>        return $result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *DELETE
</span><span class='line'>     ************************************/
</span><span class='line'>    /**
</span><span class='line'>     * Delete a record
</span><span class='line'>     * @param id The id that identifies the record to be deleted
</span><span class='line'>     * @return Deleted ID on success null on failure
</span><span class='line'>     */
</span><span class='line'>    public function delete($id = null){
</span><span class='line'>        if(!$this->isValidValues(array($id), self::TYPE_INT))
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $this->log("Deleting record $id", self::LOG_TYPE_INFO);
</span><span class='line'>
</span><span class='line'>        $data = null;
</span><span class='line'>        $this->preDelete($id);
</span><span class='line'>
</span><span class='line'>        //Authorization
</span><span class='line'>        $authCond = null;
</span><span class='line'>        if(!$this->isAuthorized(self::OP_UPDATE, $authCond)){
</span><span class='line'>            $this->log('Unauthorized update!', self::LOG_TYPE_WARN);
</span><span class='line'>            return null;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        $sql = "DELETE FROM " . $this->getTableName(self::DELETE_TABLE)
</span><span class='line'>             . " WHERE id=$id";
</span><span class='line'>        $this->log("Executing SQL: $sql", self::LOG_TYPE_DEBUG);
</span><span class='line'>        $result = $this->connection->query($sql);
</span><span class='line'>        if(!$result){
</span><span class='line'>            $this->log("SQL statement failed: ". $this->error(),
</span><span class='line'>                        self::LOG_TYPE_WARN);
</span><span class='line'>            $result = null;
</span><span class='line'>        }else
</span><span class='line'>            $result = $id;
</span><span class='line'>
</span><span class='line'>        $this->postDelete($result);
</span><span class='line'>
</span><span class='line'>        return $result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *TEMPLATE METHOD
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Template method for getAll() function
</span><span class='line'>     * Modify fields, tables and conditions to suit your need
</span><span class='line'>     * @param fields The fields that need to be modified
</span><span class='line'>     * @param tables The tables that need to be modified
</span><span class='line'>     * @param conditions The conditions that need to be modified (optional)
</span><span class='line'>     */
</span><span class='line'>    abstract protected function getAllQueryStatements(&$fields, &$tables,
</span><span class='line'>                                                      &$conditions);
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Template method for update() function
</span><span class='line'>     * If 'conditions' key is set, it will override the original WHERE clause
</span><span class='line'>     * @return array An array of individual 'field'='value' string for SET
</span><span class='line'>     * MySQL clause
</span><span class='line'>     * @see Record::update()
</span><span class='line'>     */
</span><span class='line'>    protected function getUpdateColumns(array &$fields = null){}
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Template method for delete() and update() to get the table name to be
</span><span class='line'>     * altered
</span><span class='line'>     */
</span><span class='line'>    abstract protected function getTableName($operation);
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Operations before the deletion of a record
</span><span class='line'>     * @param id The id of the record to be deleted
</span><span class='line'>     */
</span><span class='line'>    protected function preDelete($id){}
</span><span class='line'>    /**
</span><span class='line'>     * Operations after the deletion of a record
</span><span class='line'>     * @param result True on success null on failure
</span><span class='line'>     */
</span><span class='line'>    protected function postDelete($result){}
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Operations before the update process
</span><span class='line'>     * @param id The id of the record to be deleted
</span><span class='line'>     */
</span><span class='line'>    protected function preUpdate($id){}
</span><span class='line'>    /**
</span><span class='line'>     * Operations after the update process
</span><span class='line'>     * @param result True on success null on failure
</span><span class='line'>     */
</span><span class='line'>    protected function postUpdate($result){}
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Whether an operation against a record is authorized
</span><span class='line'>     */
</span><span class='line'>    protected function isAuthorized($operation = null, &$condition = null){
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *HANDY UTILITIES
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Converts 2D array to 1D array
</span><span class='line'>     * @param array The array to convert
</span><span class='line'>     * @return A converted 1D array or null on failure
</span><span class='line'>     */
</span><span class='line'>    public function toSingleArray(array $array = null){
</span><span class='line'>        $this->log('Converting 2D '. count($array) .' to 1D array',
</span><span class='line'>                    self::LOG_TYPE_INFO);
</span><span class='line'>        if($array === null || count($array) == 0)
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $result = array();
</span><span class='line'>        foreach($array as $row){
</span><span class='line'>            foreach($row as $key => $value)
</span><span class='line'>                $result[$key] = $value;
</span><span class='line'>        }
</span><span class='line'>        $this->log('Conversion resulted in an array size of '. count($result),
</span><span class='line'>                    self::LOG_TYPE_INFO);
</span><span class='line'>
</span><span class='line'>        return $result;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Validate if an array of values contain not allowable values, return false if not
</span><span class='line'>     * @param requiredKeys The keys that are non-empty and non-null
</span><span class='line'>     * @param fields The fields that needed to be checked
</span><span class='line'>     * @return True on success or false on violation
</span><span class='line'>     */
</span><span class='line'>    public function validKeys(array $requiredKeys = null, array $fields = null){
</span><span class='line'>        $this->log('Checking for invalid keys', self::LOG_TYPE_INFO);
</span><span class='line'>        if($fields === null || !$requiredKeys){
</span><span class='line'>            $this->log('Null array found!', self::LOG_TYPE_WARN);
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        foreach($requiredKeys as $key){
</span><span class='line'>            if(!isset($fields[$key])){
</span><span class='line'>                $this->log('Required field key ('. $key .') not found!',
</span><span class='line'>                            self::LOG_TYPE_WARN);
</span><span class='line'>                return false;
</span><span class='line'>            }
</span><span class='line'>            if($fields[$key] === null){
</span><span class='line'>                $this->log('Null not allowed for key ('. $key .')!',
</span><span class='line'>                            self::LOG_TYPE_WARN);
</span><span class='line'>                return false;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Check if values are valid and the type of the values
</span><span class='line'>     * @param values The values to check against
</span><span class='line'>     * @param datatype Accepted data type for $values
</span><span class='line'>     * @return True on success or false on violation
</span><span class='line'>     */
</span><span class='line'>    public function isValidValues($value = null, $datatype = self::TYPE_STRING){
</span><span class='line'>        $this->log('Checking for invalid values (non-'. $datatype .')',
</span><span class='line'>                    self::LOG_TYPE_INFO);
</span><span class='line'>        if($value === null){
</span><span class='line'>            $this->log('Null array found! $values can\'t be null!',
</span><span class='line'>                        self::LOG_TYPE_WARN);
</span><span class='line'>            return false;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if(gettype($value) == self::TYPE_ARRAY){
</span><span class='line'>            foreach($value as $val){
</span><span class='line'>                if($val === null || gettype($val) != $datatype){
</span><span class='line'>                    if(gettype($val) == self::TYPE_ARRAY)
</span><span class='line'>                        $val = implode(', ', $val);
</span><span class='line'>                    $this->log('Invalid values found => "'. $val
</span><span class='line'>                              .'" of type "'. gettype($val) .'"',
</span><span class='line'>                                self::LOG_TYPE_WARN);
</span><span class='line'>                    return false;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }else{
</span><span class='line'>            if($value === null || gettype($value) != $datatype){
</span><span class='line'>                $this->log('Invalid values found => "'. $value
</span><span class='line'>                          .'" of type "'. gettype($value) .'"',
</span><span class='line'>                            self::LOG_TYPE_WARN);
</span><span class='line'>                return false;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Write to log file
</span><span class='line'>     * @param msg The message to write
</span><span class='line'>     * @param type The type of log
</span><span class='line'>     */
</span><span class='line'>    protected function log($msg = "", $type = self::LOG_TYPE_INFO){
</span><span class='line'>        if($this->logger != null){
</span><span class='line'>            if($type == self::LOG_TYPE_WARN){
</span><span class='line'>                $this->logger->warn($msg);
</span><span class='line'>            }else if($type == self::LOG_TYPE_INFO){
</span><span class='line'>                $this->logger->info($msg);
</span><span class='line'>            }else if($type == self::LOG_TYPE_DEBUG){
</span><span class='line'>                $this->logger->debug($msg);
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public function fetchAllAssoc($result = null){
</span><span class='line'>        if($result === null)
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $assoc = array();
</span><span class='line'>        while($row = $result->fetch_assoc()){
</span><span class='line'>            $assoc[] = $row;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        return $assoc;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>?></span></code></pre></td></tr></table></div></figure>


<p>The design that here make heavy use of IDs in the table. So, you might need to tailor it to suit your needs.
After creating this class, you can start using it as the base class for all your other database operations. Just extend it
like you would with other classes, and start implementing classes in the blocks marked <strong>TEMPLATE METHOD</strong>, abstract
functions are mandatory which you must implement, while non-abstract functions are optional, they are there just so you don&#8217;t
need to implement what you don&#8217;t use. A sample of a derived class would look like this:</p>

<figure class='code'><figcaption><span>Sample Implementation </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>require_once('Record.php');
</span><span class='line'>/**
</span><span class='line'> * This class will handle all the item records in the item table
</span><span class='line'> */
</span><span class='line'>class ItemRecord extends Record{
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *CREATE
</span><span class='line'>     ************************************/
</span><span class='line'>    /**
</span><span class='line'>     * $fields should have all the following keys except 'description':
</span><span class='line'>     * - ITEM_NO: The item number (string)
</span><span class='line'>     * - ITEM_DESC: Description of the item (string)
</span><span class='line'>     * - ITEM_QTY: Quantity of the item (integer)
</span><span class='line'>     * - ITEM_PRICE: Price of the item (float or double)
</span><span class='line'>     * {@inheritdoc}
</span><span class='line'>     */
</span><span class='line'>    public function insert(array $fields = null){
</span><span class='line'>        if(!$this->validKeys(array(self::ITEM_NO, self::ITEM_QTY, self::ITEM_PRICE), $fields))
</span><span class='line'>            return null;
</span><span class='line'>        if(!$this->isValidInput($fields))
</span><span class='line'>            return null;
</span><span class='line'>
</span><span class='line'>        $this->log('Inserting record', self::LOG_TYPE_INFO);
</span><span class='line'>
</span><span class='line'>        $insertFields = 'item_no, quantity , price, item_description';
</span><span class='line'>            
</span><span class='line'>        $values = "'". $this->connection->escape_string($fields[self::ITEM_NO])
</span><span class='line'>            . "', ". $fields[self::ITEM_QTY] .', '. $fields[self::ITEM_PRICE] .', ';
</span><span class='line'>        if(isset($fields[self::ITEM_DESC]))
</span><span class='line'>            $values .= "'". $this->connection->escape_string($fields[self::ITEM_DESC]) ."'";
</span><span class='line'>        else
</span><span class='line'>            $values .= "null";
</span><span class='line'>
</span><span class='line'>        $sql = "INSERT INTO ". self::ITEM_TABLE ." ($insertFields) VALUES ($values)" ;
</span><span class='line'>
</span><span class='line'>        $this->log("Executing SQL: $sql", self::LOG_TYPE_DEBUG);
</span><span class='line'>
</span><span class='line'>        if($this->connection->query($sql))
</span><span class='line'>            return $this->connection->insert_id;
</span><span class='line'>
</span><span class='line'>        $this->log("SQL execution failed: ". $this->error(),
</span><span class='line'>                    self::LOG_TYPE_WARN);
</span><span class='line'>        return null;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *TEMPLATE METHOD IMPLEMENTATION
</span><span class='line'>     ************************************/
</span><span class='line'>    /**
</span><span class='line'>     * {@inheritDoc}
</span><span class='line'>     */
</span><span class='line'>    protected function getTableName($operation){
</span><span class='line'>        return self::ITEM_TABLE;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * {@inheritDoc}
</span><span class='line'>     */
</span><span class='line'>    public function getAllQueryStatements(&$fields, &$tables, &$conditions){
</span><span class='line'>        $fields = '*';
</span><span class='line'>        $tables = self::ITEM_TABLE;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * $fields may have the following keys:
</span><span class='line'>     * - ITEM_NO: The item number
</span><span class='line'>     * - ITEM_DESC: Description of the item
</span><span class='line'>     * - ITEM_QTY: Quantity of the item
</span><span class='line'>     * - ITEM_PRICE: Price of the item
</span><span class='line'>     * {@inheritDoc}
</span><span class='line'>     */
</span><span class='line'>    public function getUpdateColumns(array &$fields = null){
</span><span class='line'>        $columns = array();
</span><span class='line'>
</span><span class='line'>        if(!$this->isValidInput($fields)){
</span><span class='line'>            $this->log('Incorrect data type detected!', self::LOG_TYPE_WARN);
</span><span class='line'>            return null;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if(isset($fields[self::ITEM_NO]))
</span><span class='line'>            $columns[] = "item_no='" . $this->connection->escape_string($fields[self::ITEM_NO]) . "'";
</span><span class='line'>        if(isset($fields[self::ITEM_DESC]))
</span><span class='line'>            $columns[] = "item_description='" . $this->connection->escape_string($fields[self::ITEM_DESC]) . "'";
</span><span class='line'>        if(isset($fields[self::ITEM_QTY]))
</span><span class='line'>            $columns[] = "quantity=" . $fields[self::ITEM_QTY];
</span><span class='line'>        if(isset($fields[self::ITEM_PRICE]))
</span><span class='line'>            $columns[] = "price=" . $fields[self::ITEM_PRICE];
</span><span class='line'>
</span><span class='line'>        return $columns;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /************************************
</span><span class='line'>     *UTILITIES
</span><span class='line'>     ************************************/
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * Checks whether input is valid
</span><span class='line'>     * @param fields Array of key value pair to check against
</span><span class='line'>     * @return True if valid or false if invalid
</span><span class='line'>     */
</span><span class='line'>    public function isValidInput($fields = null){
</span><span class='line'>        if((isset($fields[self::ITEM_NO]) && !$this->isValidValues(array($fields[self::ITEM_NO]), self::TYPE_STRING))
</span><span class='line'>        || (isset($fields[self::ITEM_DESC]) && !$this->isValidValues(array($fields[self::ITEM_DESC]), self::TYPE_STRING))
</span><span class='line'>        || (isset($fields[self::ITEM_QTY]) && !$this->isValidValues(array($fields[self::ITEM_QTY]), self::TYPE_INT))
</span><span class='line'>        || (isset($fields[self::ITEM_PRICE]) && !$this->isValidValues(array($fields[self::ITEM_PRICE]), self::TYPE_DOUBLE)))
</span><span class='line'>            return false;
</span><span class='line'>
</span><span class='line'>        return true;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>?></span></code></pre></td></tr></table></div></figure>


<h2>Usage Notes</h2>

<ol>
<li>Inserting data into table has to be manually implemented with the insert() function.</li>
<li>The getTableName() function <strong>MUST</strong> be implemented, and has to return the table name, the parent class wouldn&#8217;t know if you don&#8217;t tell them which table to update/delete/retrieve/update.</li>
<li>All classes extending <code>Record</code> will automatically have a delete() function without the need for implementation, it uses ID to identify a row in the table, override this function if you don&#8217;t use ID.</li>
<li>Retrieval of records are implemented in getAll() function, which in turn calls getAllQueryStatements() function, you have to set the fields, tables and conditions in this function, no need for return (it&#8217;s pass by reference).</li>
<li>The update() function will call the getUpdateColumns(), so, you have to override getUpdateColumns() to return queries in an array, each index consist of field=value, this will be passed directly into the queries.</li>
<li>All functions starting with pre and post are functions that will be called before and after an operation, it&#8217;s optional.</li>
<li>isAuthorized() function is for authorization if you need your application to authorize certain user access to information, it returns true by default, which means any user is authorized to access any data. You perform some checks in this function, and decide whether the user is authorized to access the data. The variable, <code>$operation</code> is used to tell you what table operation is performing, whether it&#8217;s delete (OP_DELETE), update (OP_UPDATE), create (OP_CREATE) or read (OP_READ), variable <code>$condition</code> is used to add additional conditions into the queries. Once logic is done, you have to return true to authorize access or false to unauthorize the access.</li>
<li>You can either group multiple related tables (e.g. related by foreign keys) into a class extending Record or you can create a class extending Record for every tables you have in your database. However, I still find it more maintainable by creating each class for each table.</li>
<li>This is <strong>NOT</strong> a perfect design, but it should suit any small - medium projects. For larger projects, I probably would not use PHP, I would use a framework if I really need to. Also, the chosen architecture might not be suitable for this design.</li>
</ol>


<p>With this design, you implement only the parts that differ while maintaining the parts of the code (A.K.A template method, it&#8217;s a design pattern by G.O.F.), which minimizes codes to type. Also, if you want to change something that affects all record operations, you change only the base class, or if you wanted to add some functions for all record operations, you can just add it in the base class and it is available in the derived class. However, there is performance penalty for this design, especially when you create a class for each tables in your database, as always, object creation is expensive. But looking at the benefits it offers, I think it is worth the price.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postfix mail relays]]></title>
    <link href="http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays/"/>
    <updated>2013-10-09T14:31:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/10/09/postfix-mail-relays</id>
    <content type="html"><![CDATA[<p>Recently I have to setup a mail server to notify me of system failure from Nagios. So, instead of setting the mail server from scratch, I decided to use my company&#8217;s email as a relay for notification.</p>

<!-- more -->


<p>Postfix are installed on most distros as the default MTA (Mail Transfer Agent). In cases where it is not installed, you can install by searching for postfix in your package manager, e.g. <code>sudo apt-cache search postfix</code>. Since, I am installing on a Ubuntu 12.04 machine, the instructions here lean more to Ubuntu systems, but it should work with other distros too. Configuration of mail server used to relay email from my Ubuntu machine: \</p>

<pre><code>Incoming server: smtp.domain.com (IMAP = Port 143, POP = Port 110)
Outgoing server: smtp.domain.com (SMTP = Port 587)
</code></pre>

<p>1. Add the following lines to <code>/etc/postfix/main.cnf</code>: \</p>

<pre><code># Settings for relay
relayhost = smtp.domain.com:587
smtp_sasl_auth_enable = yes
smtp_sasl_password_maps = hash:/etc/postfix/sasl/sasl_passwd
smtp_sasl_security_options = noanonymous, noplaintext
smtp_sasl_mechanism_filter = login, plain
smtp_generic_maps = hash:/etc/postfix/generic 
</code></pre>

<p>2. Add the following lines to /etc/postfix/sasl/sasl_passwd: \</p>

<pre><code>[smtp.domain.com]:587 username:password
</code></pre>

<p>3. Generating sasl_passwd.db file by running the following command: \</p>

<pre><code>$ sudo postfix /etc/sasl/sasl\_passwd
</code></pre>

<p>4. Make sure that only root can read both file:</p>

<pre><code>$ sudo chmod 600 /etc/sasl/sasl\_passwd*
</code></pre>

<p>5. Restart postfix:</p>

<pre><code>$ sudo /etc/init.d/postfix restart
</code></pre>

<p>6. Send a test mail:</p>

<pre><code>echo "Testing" | mail -s "Test" email@address.com
</code></pre>

<p>You should receive your email in the address you sent above. If you are not getting an email, check the system mail, email failed to sent will get sent back to your own machine along with some error messages, you can check the system mail by using <code>cat /var/mail/root</code>. Note however, not all mail servers allow mail relays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Internet Access on Raspberry Pi Through Wired Connection]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/22/enable-internet-access-on-raspberry-pi-through-wired-connection/"/>
    <updated>2013-06-22T17:00:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/22/enable-internet-access-on-raspberry-pi-through-wired-connection</id>
    <content type="html"><![CDATA[<p>The first I got my hands on a raspberry pi, I wanted to update its OS to the latest, but the problem is that my RPi is connected to my laptop (using OpenSuse) and I am using SSH to access it (I don&#8217;t have access to any displays).</p>

<!-- more -->


<h2>Preparation</h2>

<p>First, prepare your SDCard for RPi, there are plenty of resources on how to prepare your SDCard. Then, follow <a href="http://www.raspberrypi.org/archives/3760">this guide</a> to configure your RPi for SSH access from your machine.</p>

<h3>IP Addressing</h3>

<p>For this guide, I am using the following addressing scheme:<br/>
- RPi eth0 => 192.168.10.2/24<br/>
- Laptop eth0 (connected to RPi) => 192.168.10.1/24<br/>
- Laptop wlan0 (connected to router, default gateway) => 192.168.1.6/24<br/>
- Router (Internet access) => 192.168.1.254/24</p>

<h2>Fixing Default Gateway on my Laptop</h2>

<p>When I connected to my RPi, Network Manager replaced my default gateway to <code>eth0</code>, so I am not able to access the Internet after connected to RPi. You verify it by using <code>route</code> command without parameters, if the default line points to eth0, it means your default gateway is overwritten, if it&#8217;s not, it means you can skip this section, you can verify it by ping-ing <code>www.google.com</code>. To fix this problem, I deleted the default gateway and added a new default gateway that points to my router:</p>

<pre><code>$ sudo /sbin/route del default
$ sudo /sbin/route add default gw 192.168.1.254 dev wlan0
</code></pre>

<p>Verify that your default gateway now points to wlan0 using <code>route</code> command without parameters. Try to ping <code>www.google.com</code> to make sure that your laptop have access to the Internet, your RPi won&#8217;t be able to access the Internet if your laptop does not.</p>

<h2>Adding Default Gateway to RPi</h2>

<p>Using the <code>route command</code> add a default that points to eth0 interface:</p>

<pre><code>$ sudo route add default gw 192.168.10.1 dev eth0
</code></pre>

<h2>The Problem</h2>

<p>Out of the box without masquerading, once a packet sourced from 192.168.10.0/24 network (my RPi &lt;==> laptop subnet) reaches the router on subnet 192.168.1.0/24, depends on the configuration, it will route or drop the packet. Even if the router successfully routed the packet to the Internet, it will definitely drop the packet, because it does not know where to route the packet for network 192.168.10.0/24 network. So, masquerading seems to be the only solution here.</p>

<h2>Masquerading and Configuration</h2>

<p>Masquerading is like that Linux version of NAT, it translates your internal network to external network (e.g. for Internet access). What it does is that any packets bound for any network from 192.168.10.0/24 subnet will be translated to 192.168.1.0/24 subnet, so my router knows where to route my 192.168.10.0/24 packet.</p>

<p>Since I am using OpenSUSE, I will configure masquerading through its own firewall using YaST.<br/>
1. Open up firewall configuration in YaST and select <code>Interfaces</code><br/>
2. Double click eth0 interface and change it to <code>External Zone</code><br/>
3. Select <code>Masquerading</code> on the left and click <code>Masquerade Networks</code><br/>
4. Add <code>80</code> to <code>requested port</code><br/>
5. Add <code>192.168.1.6</code> (or your wlan0 IP) to <code>Redirect to Masqueraded IP</code><br/>
6. Add <code>81</code> to <code>Redirect to Port</code> or any ports you want your traffic to be translated to, but make sure you are not using any servers on that port<br/>
7. Click <code>Add</code><br/>
8. Select <code>Startup</code> on the left and click <code>Save Settings and Restart Firewall Now</code><br/>
9. Try to ping <code>www.google.com</code> from your RPi, you should get be able to at this point</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.raspberrypi.org/archives/3760">Using your desktop or laptop screen and keyboard with your Pi</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing Multiple Tracks VCD on Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux/"/>
    <updated>2013-06-16T13:43:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux</id>
    <content type="html"><![CDATA[<p>I have bought a VCD movie recently to find that it was not playable on my OpenSUSE, CD2 works fine but not CD1. Then I go back for a replacement disc on the shop and came back to watch it but unfortunately, the problem persist. The problem is that CD1 comtains multiple tracks that most Mediaplayer doesn&#8217;t support (tried VLC and Kaffeine). So I started to dive into the problems and found a thread that provides useful information on playing VCD on Linux (Refer to references).</p>

<!-- more -->


<p>Basically there are two ways to work around this problem:<br/>
1. Use MPlayer to play your disc<br/>
2. Rip your VCD using vcdxrip</p>

<h2>1. Use MPlayer to play your dics</h2>

<p>MPlayer was quite new to me actually, it is launched through the console, and it is does not appear in the menu. Here is the command to play VCD using MPlayer (install if you haven&#8217;t already):</p>

<pre><code>mplayer vcd://&lt;track number&gt; -cdrom-device /dev/&lt;your cd rom device&gt;
</code></pre>

<p>Of course, you have to substitute <code>&lt;track number&gt;</code> and <code>&lt;your cd rom device&gt;</code> with the track number and your cd rom device. On my machine, it&#8217;s on track 3 and my cd rom device is either dvd or sr0 (dvd is a symlink to sr0). So my complete command is:</p>

<pre><code>mplayer vcd://3 -cdrom-device /dev/sr0
</code></pre>

<p>Refer to mplayer&#8217;s manpage for controls and details: <code>man mplayer</code>.</p>

<h2>2. Rip your VCD using vcdxrip</h2>

<p>This has not personally worked for me because it keeps stopping at certain points, it just doesn&#8217;t copy the whole VCD. But it is still good to know if MPlayer does not work. The command is very easy and straight forward. Remember to change to a directory for your ripped files before executing this command:</p>

<pre><code>vcdxrip -C
</code></pre>

<p>And there will be multiple files present on your currect directory, where you could play using VLC or whatever media player you may wish.</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.mplayerhq.hu/DOCS/HTML/en/vcd.html">MPlayer with VCD</a></li>
<li><a href="http://forums.linuxmint.com/viewtopic.php?f=48&amp;t=43106">Forums discussing issues with VCDs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Downloading API Documentation with WGET]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/22/downloading-api-documentation-with-wget/"/>
    <updated>2013-05-22T22:18:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/22/downloading-api-documentation-with-wget</id>
    <content type="html"><![CDATA[<p>When I was trying to learn Google Web Toolkit (GWT), I wanted to download the entire API documentation for my reference and offline viewing. One problem that I encountered is that unlike JDK, GWT does not provide downloads for their API documentation. So an idea come up to me that maybe I should use something like CURL or WGET to get their documentation. So, I googled if that was possible, and found <a href="http://www.linuxjournal.com/content/downloading-entire-web-site-wget">this amazing Linux Journal Tip</a>.</p>

<!-- more -->


<p>When I was trying out the command directly, WGET gives me an error. So I checked every options from Linux Journal against WGET&#8217;s man page and found that <code>--html-extension</code> has been changed to <code>--adjust-extension</code> since version 1.12. So, here&#8217;s the complete command:</p>

<pre><code>$ wget \
    --recursive \
    --no-clobber \
    --page-requisites \
    --adjust-extension \
    --convert-links \
    --restrict-file-names=windows \
    --domains google-web-toolkit.googlecode.com/ \
    --no-parent \
        google-web-toolkit.googlecode.com/svn/javadoc/latest
</code></pre>

<p>And here&#8217;s the options description from Linux Journal:</p>

<ul>
<li><code>--recursive</code>: download the entire Web site.</li>
<li><code>--domains google-web-toolkit.googlecode.com</code>: don&#8217;t follow links outside google-web-toolkit.googlecode.com.</li>
<li><code>--no-parent</code>: don&#8217;t follow links outside the directory tutorials/html/.</li>
<li><code>--page-requisites</code>: get all the elements that compose the page (images, CSS and so on).</li>
<li><code>--html-extension</code>: save files with the .html extension.</li>
<li><code>--convert-links</code>: convert links so that they work locally, off-line.</li>
<li><code>--restrict-file-names=windows</code>: modify filenames so that they will work in Windows as well.</li>
<li><code>--no-clobber</code>: don&#8217;t overwrite any existing files (used in case the download is interrupted and resumed).</li>
</ul>


<p>After that, it will take some time for it to complete. Go get yourself a cup of tea or do something else, it&#8217;s probably longer than downloading a single tarball documentation.</p>

<h2>Make a Shellscript</h2>

<p>People like me couldn&#8217;t remember such a long options, so, I created a simple shell script to assist me in updating the documentation, fetching other documentation, and downloading a website:</p>

<pre><code>#!/bin/sh

wget \
    --recursive \
    --no-clobber \
    --page-requisites \
    --adjust-extension \
    --convert-links \
    --restrict-file-names=windows \
    --domains $(echo $1 | sed 's!http://!!' | cut -d/ -f1) \
    --no-parent \
        $1
</code></pre>

<p>Of course you can put it in a shell function as well if you like, but I prefer shell scripts because it&#8217;s easier to manage.</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://www.linuxjournal.com/content/downloading-entire-web-site-wget">Linux Journal Article on WGET</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Juniper VPN on 64 bit Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux/"/>
    <updated>2013-05-18T18:21:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>When I was supporting a company that uses Juniper VPN with my colleague, I found that Juniper VPN is only supported in 32-bit version of Linux (though it was supported in 64-bit Windows and Mac machine, should ask them why they don&#8217;t compile it for 64-bit Linux). I have spent hours finding solution to this situation and found one particular solution that just works. Tried <a href="http://mad-scientist.net/juniper.html">Mad Scientist&#8217;s JNC (Juniper Network Connect)</a> but it didn&#8217;t work for some unknown reasons.</p>

<!-- more -->


<p>This solution is based on <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger&#8217;s blog on &#8216;Juniper VPN on openSUSE x86_64&#8217;</a>, all credits goes to him/her.</p>

<h2>Requirements</h2>

<p>To use Juniper VPN, JRE or JDK with web plugins is a must (<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download Here</a>), it does not work with IcedTea and openJDK. We are not using any third party solution, so we have to comply to the Juniper VPN&#8217;s system requirements.</p>

<h2>Steps</h2>

<p>1. Download Juniper VPN through the software provided by the company. Once the applet is loaded, it should ask you for your root/su password, just press [Enter] twice. It will create <code>.juniper_networks</code> in your home directory.<br/>
<span class='caption-wrapper center'><img class='caption' src='http://ctingwai.github.com/images/juniper-loading.png' width='' height='' alt=''Juniper VPN Loading Screen'' title=''Juniper VPN Loading Screen''><span class='caption-text'>&#8216;Juniper VPN Loading Screen&#8217;</span></span>
<span class='caption-wrapper center'><img class='caption' src='http://ctingwai.github.com/images/juniper-pwdprompt.png' width='' height='' alt=''Juniper VPN Password Prompt'' title=''Juniper VPN Password Prompt''><span class='caption-text'>&#8216;Juniper VPN Password Prompt&#8217;</span></span></p>

<p>2. Change directory to <code>$HOME/.juniper_networks</code></p>

<pre><code>cd $HOME/.juniper_networks
</code></pre>

<p>3. Remove <code>network_connect</code> directory</p>

<pre><code>rm -rf network_connect
</code></pre>

<p>4. Extract <code>ncLinuxApp.jar</code></p>

<pre><code>unzip ncLinuxApp.jar
</code></pre>

<p>5. Use <code>ldd</code> to find out required libraries for <code>network_connect/libncui.so</code> and <code>zypper wp &lt;library&gt;</code> or <code>yum provides &lt;library&gt;</code> to find out the libraries.</p>

<p>6. Make a binary out of the library</p>

<pre><code>gcc -m32 -Wl,-rpath,`pwd` -o network_connect/ncui network_connect/libncui.so
</code></pre>

<p>7. Set permission and owner/group</p>

<pre><code>sudo chown root:root network_connect/ncui
sudo chmod 6711 network_connect/ncui
</code></pre>

<p>8. Get the certificate</p>

<pre><code>sh network_connect/ncui &lt;your Juniper VPN host&gt; &lt;certificatename&gt;.cer
</code></pre>

<p>9. Make sure that you are still logged into you VPN host, and find your DSID by browsing though your browser&#8217;s cookie of your VPN site. Search for the cookie named DSID</p>

<p>10. Connect to Juniper VPN</p>

<pre><code>network_connect/ncui -h &lt;you Juniper VPN host&gt; -c DSID=&lt;value obtained in step 9&gt; -f &lt;certificate obtained in step 8&gt;.cer
</code></pre>

<p>11. (Optional) To ease future VPN connections, copy and paste the following script to <code>$HOME/bin/vpnConnect</code></p>

<pre><code>#!/bin/bash

if [ $# -lt 1 ]; then
        echo -e "Usage:\t$0 &lt;DSID&gt;"
        echo -e "\n\tNOTE: DSID can be found in the cookie after you logged into your VPN site"
        exit 0
fi

# Connect to your VPN
~/.juniper_networks/network_connect/ncui -h &lt;your vpn host&gt; -c DSID=$1 -f ~/.juniper_networks/&lt;cert from step 8&gt;.cer
</code></pre>

<p>12. (Continue step 11) Add executable bit <code>chmod +x $HOME/bin/vpnConnect</code></p>

<p>13. (To connect after step 12) Use <code>vpnConnect &lt;your DSID as in step 9&gt;</code> to connect</p>

<h2>Alternative ways for shortening</h2>

<p>Personally I prefer to use a script to shorten my commands, because it allow me to specify usage notes and comments when the usage is not right, but if you are not like me, you can use Linux aliases to shorten it, refer to <code>man alias</code> for usage or Google it =)</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://mad-scientist.net/juniper.html">Mad Scientist&#8217;s JNC (Juniper Network Connect)</a><br/>
2. <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger&#8217;s blog on &#8216;Juniper VPN on openSUSE x86_64&#8217;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Linux Power Usage]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage/"/>
    <updated>2013-05-17T22:54:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage</id>
    <content type="html"><![CDATA[<p>A lot of Linux distro is not optimised for laptops, some of them could use up much power if you don&#8217;t optimize it. By the end of this guide, you should be able to reduce your power consumption by 3-5 watts, I know it seems not much but it can give my machine 15-30 mins more power. By default, my machine used up more than 24 watts of power, as indicated by <code>powertop</code>. To find out the power usage of your machine:</p>

<!-- more -->


<p>1. Unplug or switch off your AC to your laptop<br/>
2. Enter <code>sudo /usr/sbin/powertop</code> in a terminal<br/>
<span class='caption-wrapper center'><img class='caption' src='http://ctingwai.github.com/images/powertopOverview.png' width='' height='' alt=''The left most column is my power consumption in watts'' title=''The left most column is my power consumption in watts''><span class='caption-text'>&#8216;The left most column is my power consumption in watts&#8217;</span></span></p>

<p>To reduce the power consumption, I have installed <code>laptop-mode-tools</code>, as its name suggest, it is a tool for laptops. Once installed, I found that my wireless driver (<code>ath5k</code>) does not support power saving mode yet, so I have to disable it. Edit <code>/etc/laptop-mode/</code> and change <code>WIRELESS_BATT_POWER_SAVING=1 to WIRELESS_BATT_POWER_SAVING=0</code>, this step is optional, nothing might happen if you don&#8217;t do anything to it.</p>

<p>To enable <code>laptop-mode</code>:</p>

<pre><code>$ sudo systemctl enable laptop-mode.service
</code></pre>

<p>Next, I created a custom script for <code>laptop-mode-tools</code> to enable certain power saving not included in <code>laptop-mode-tools</code> modules:</p>

<p>1. Edit <code>$HOME/bin/powersaving_on</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo low &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 1 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo Y &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 1500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>2. Edit <code>$HOME/bin/powersaving_off</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo default &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 2 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo N &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x $HOME/bin/powersaving_on; chmod +x $HOME/bin/powersaving_off
</code></pre>

<p>4. Create symbolic links for laptop-mode-tools:</p>

<pre><code>$ sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/batt-start/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/lm-ac-stop/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/batt-stop/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/lm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-stop/powersaving_off
</code></pre>

<p><strong>Explanation and Notes:</strong><br/>
<em>Step 1</em>: Enable some powersaving features to reduce power usage (require root permission), see the script&#8217;s comments. You can change <code>echo low &gt; /sys/class/drm/card0/device/power_profile</code> to <code>echo mid &gt; /sys/class/drm/card0/device/power_profile</code> if you need more power</p>

<p><em>Step 2</em>: Disable powersaving features by setting all its values to default</p>

<p><em>Step 3</em>: Make both scripts executable</p>

<p><em>Step 4</em>: I have wrote it in a way that you can cut and paste into your terminal emulator in one step, just replace <code>&lt;username&gt;</code> with your username. <code>laptop-mode-tools</code> provide a way for users to execute certain scripts when on AC or battery by placing your scripts in its corresponding directories:</p>

<ul>
<li>/etc/laptop-mode/batt-start: Executed when laptop enters battery mode</li>
<li>/etc/laptop-mode/batt-stop: Executed when laptop exits battery mode</li>
<li>/etc/laptop-mode/lm-ac-start: Executed when <code>laptop-mode</code> is enabled AND laptop enters AC mode</li>
<li>/etc/laptop-mode/lm-ac-stop: Executed when <code>laptop-mode</code> is enabled AND laptop exits AC mode</li>
<li>/etc/laptop-mode/nolm-ac-start: Executed when <code>laptop-mode</code> is disabled through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop enters AC mode</li>
<li>/etc/laptop-mode/nolm-ac-stop: Executed when <code>laptop-mode</code> is disable through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop exits AC mode</li>
</ul>


<p><strong>Other Tips:</strong><br/>
1. Disable bluetooth: <code>sudo rfkill block bluetooth</code><br/>
2. It seems that monitor used up most power (11-18 watts depending on brightness on my machine), reduce brightness to save more power<br/>
3. Another power killer is WiFi, (more than 6 watts on my machine), so turn it off if you don&#8217;t use it</p>

<p><strong>REFERENCES:</strong><br/>
1. <a href="https://wiki.archlinux.org/index.php/Power_saving">Great ArchWiki Article on Power Saving</a><br/>
2. <a href="http://aubreypwd.com/blog/2012/09/14/howto-ubuntu-12-04-open-source-radeon-drivers-and-power-management/">ATI Radeon Power Management Guide</a><br/>
3. <a href="http://www.linuxjournal.com/article/7539?page=0,1">Linux Journal Article on laptop-mode-tools</a><br/>
4. <a href="http://www.overclock.net/t/731469/how-to-power-saving-with-the-radeon-driver">Using ATI Radeon Power Management with laptop-mode-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S2ram as default suspending method]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method/"/>
    <updated>2013-05-12T23:45:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method</id>
    <content type="html"><![CDATA[<p>When I installed OpenSuSE 12.3 on my VAIO laptop, suspend is not working (not even <code>suspend</code> command). Instead, I have to issue <code>s2ram</code> command in OpenSuSE to suspend my machine. To make it the default sleep module (<code>uswsusp</code>), here are the steps required:</p>

<!-- more -->


<p>1. Edit <code>/etc/pm/config.d/module</code> and add the following line:</p>

<pre><code>SLEEP_MODULE=uswsusp
</code></pre>

<p>2. Edit <code>/etc/pm/config.d/defaults</code> and add the following line:</p>

<pre><code>S2RAM_OPTS="-f"
</code></pre>

<p>3. Reboot and it will go to sleep again.</p>

<p><strong>REFERENCES</strong><br/>
1. <a href="http://en.opensuse.org/SDB:Suspend_to_RAM">OpenSuSE Documentation</a><br/>
2. <a href="http://askubuntu.com/questions/54591/use-s2ram-when-closing-lid-with-kde">Ask Ubuntu Thread</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing incorrect lid state]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state/"/>
    <updated>2013-04-29T12:32:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state</id>
    <content type="html"><![CDATA[<p>When I install a Linux distro to my VAIO notebook, I found that there is an annoying bug with the lid switch. It does not get updated whenever I suspend on lid close, it means <code>cat /proc/acpi/button/lid/LID/state</code> will output <code>state:   close</code>. When I close the lid again, it won&#8217;t suspend, instead, it will change the state to open. So in order for it to suspend again on lid close after the first suspend, I have to close it, reopen the lid and close it again.</p>

<p>I have tried installing Linux Mint, Fedora, Fuduntu and Xubuntu, but it is not fixed in any of the distros. So, I don&#8217;t think it is distro problems. While researching this issues (which I spent two full days), I found that Linux got an amazing feature that enable users to dynamically loading DSDT at boot time, there is no need to update the BIOS. So here&#8217;s the instuctions:</p>

<!-- more -->


<p>1. Install <code>iasl</code> using <code>yum</code>, <code>apt-get</code> or whatever package management you are using.</p>

<p>2. Extract DSDT:</p>

<pre><code>$ sudo cat /sys/firmware/acpi/tables/DSDT &gt; dsdt.aml
</code></pre>

<p>3. Disassemble <code>dsdt.aml</code> using the following command, this should create a new file <code>dsdt.dsl</code>:</p>

<pre><code>$ iasl -d dsdt.aml
</code></pre>

<p>4. Compile it using:</p>

<pre><code>$ iasl -tc dsdt.dsl
</code></pre>

<p>5. Fix any compiler errors, warnings and remarks. On my machine, the output is:</p>

<pre><code>dsdt.dsl  1352:                         And (CTRL, 0x1E)
Warning  1106 -                                 ^ Result is not used, operator has no effect

dsdt.dsl  1584:                     0x00000000,         // Length
Error    4122 -                              ^ Invalid combination of Length and Min/Max fixed flags

dsdt.dsl  2443:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)

dsdt.dsl  2521:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)
</code></pre>

<p>a. The first one is on line 1352 can be fixed simply by changing <code>And (CTRL, 0x1E)</code> to <code>And (CTRL, 0x1E, CTRL)</code>.</p>

<p>b. The second one is on line 1584, the length should be <code>Range Maximum</code> - <code>Range Minimum</code> + 1, on my machine, so fire up a hex calculator and start subtracting. On my machine, it&#8217;s <code>0xE0000000</code> (<code>0xDFFFFFFF</code> - <code>0x00000000</code> + <code>0x00000001</code>).</p>

<p>c. The third and fourth line is on line 2443 and 2521, because it uses a reserved name, simply replacing all instances of <code>_T_0</code> to <code>T_0</code> will stop the complaints. In vim, it is as simple as issuing <code>:%s/_T_0/T_0/g</code> in command mode.</p>

<p>6. Once everything is fixed (no errors, warning or remarks), add the following line to <code>_WAK</code> method, simply search for <code>_WAK</code> in <code>dsdt.dsl</code>:</p>

<pre><code>If (LNotEqual (0x00, LIDS))
    {
        Store (0x00, LIDS)
        Notify (\_SB.LID, 0x80)
    }
</code></pre>

<p><strong>NOTE 1:</strong> You might need to change <code>\_SB.LID</code> to match your path to <code>LID</code> method or on some machine <code>LID0</code>. Method name is preceded by an <code>_</code> (underscore), so you can search for <code>_LID</code> in <code>dsdt.dsl</code>. After you found it, you have to determine the scope, scroll up until you found <code>Scope</code> keyword that your <code>LID</code> or <code>LID0</code> method belongs to, inside the bracket is the scope name. It may be in more than one scope, so, it might be <code>\_PCI0.SB.LID</code>. If you specify an incorrect path to <code>LID</code> method, you will receive the following error:</p>

<pre><code>dsdt.dsl   300:             Notify (LID, 0x80)
Error    4068 -                       ^ Object is not accessible from this scope (LID_)
</code></pre>

<p><strong>NOTE 2:</strong> What this function does is just to update the lid state once it is resumed from sleep. According to the ACPICA documentation, <code>_WAK</code> method is called by <code>AcpiLeaveSleepState()</code> function of ACPI. If the lid is open, the <code>LIDS</code> variable is <code>0x00</code>, or <code>0x01</code> otherwise. So these few lines translate to &#8220;if lid state is not open (closed), change lid state to open and call <code>LID</code> method&#8221;.</p>

<p>7. Compile it using <code>iasl -tc dsdt.dsl</code>.</p>

<p>8. If no errors, warnings or remarks, add the following lines to <code>/etc/grub.d/01_acpi</code>:</p>

<pre><code># Uncomment to load custom ACPI table
GRUB_CUSTOM_ACPI="/boot/dsdt.aml"


# DON'T MODIFY ANYTHING BELOW THIS LINE!


prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib


. /usr/share/grub/grub-mkconfig_lib
#. ${libdir}/grub/grub-mkconfig_lib


# Load custom ACPI table
if [ x${GRUB_CUSTOM_ACPI} != x ] &amp;&amp; [ -f ${GRUB_CUSTOM_ACPI} ] \
    &amp;&amp; is_path_readable_by_grub ${GRUB_CUSTOM_ACPI}; then
    echo "Found custom ACPI table: ${GRUB_CUSTOM_ACPI}" &gt;&amp;2
    prepare_grub_to_access_device `${grub_probe} --target=device ${GRUB_CUSTOM_ACPI}` | sed -e "s/^/  /"
    cat &lt;&lt; EOF
acpi (\$root)`make_system_path_relative_to_its_root ${GRUB_CUSTOM_ACPI}`
EOF
fi
</code></pre>

<p>9. Add executable bit to it:</p>

<pre><code>$ sudo chmod +x /etc/grub.d/01_acpi
</code></pre>

<p>10. Copy the new <code>dsdt.aml</code> to <code>/boot</code>:</p>

<pre><code>$ sudo cp dsdt.aml /boot
</code></pre>

<p>11. Regenerate <code>grub.cfg</code>:</p>

<pre><code>$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>

<p>12. Reboot</p>

<h2>References</h2>

<ol>
<li><a href="https://wiki.archlinux.org/index.php/DSDT">Archwiki on DSDT</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=676031">Redhat&#8217;s Bug Report</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/34389">Ubuntu&#8217;s Bug Report 1</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/44825">Ubuntu&#8217;s Bug Report 2</a></li>
<li><a href="http://sadevil.org/blog/2012/01/01/fixing-the-acpi-dsdt-of-an-acer-ferrari-one-200/">Somebody&#8217;s blog on fixing DSDT errors, remarks and warnings</a></li>
<li><a href="https://www.acpica.org/documentation">ACPICA Documentation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permanent DNS Settings for Network Manager]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager/"/>
    <updated>2013-04-23T16:39:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager</id>
    <content type="html"><![CDATA[<p>DNS settings in Linux are generally stored in <code>/etc/resolv.conf</code> file, you could basically just edit this file to change the DNS settings in any Linux systems. However, the change is not permanent, it will be overwritten by Network Manager when u reconnect or reboot. So, to make the change permanent, there are two methods, Network Manager&#8217;s dispatcher script method and the immutable flag method.</p>

<!-- more -->


<h2>Using Network Manager&#8217;s Dispatcher Method</h2>

<p>This solution is based on <a href="https://wiki.archlinux.org/index.php/NetworkManager#Use_OpenDNS_servers">ArchWiki</a>. Basically, the steps are:</p>

<p>1. Become root and create a new file <code>/etc/resolv.conf.googledns</code>.</p>

<p>2. Edit <code>/etc/resolv.conf.googledns</code> and add the following lines:</p>

<pre><code>nameserver 8.8.8.8
nameserver 8.8.4.4
</code></pre>

<p>3. Add the following line to <code>/etc/NetworkManager/dispatcher.d/12-dns_server</code>:</p>

<pre><code>cp -f /etc/resolv.conf.googledns /etc/resolv.conf
</code></pre>

<p>4. Add executable bit to the script:</p>

<pre><code># chmod +x /etc/NetworkManager/dispatcher.d/12-dns_server
</code></pre>

<p>5. Restart Network Manager:</p>

<pre><code># systemctl restart NetworkManager
</code></pre>

<p>What these steps do is just to replace <code>/etc/resolv.conf</code> with the file <code>/etc/resolv.conf.googledns</code> everytime you connect.</p>

<h2>Immutable Flag Method</h2>

<p>You can also try adding <em>immutable</em> flag to <code>/etc/resolv.conf</code> once you have changed the DNS (<code>nameserver</code> field) in <code>/etc/resolv.conf</code> file:</p>

<pre><code># chattr +i /etc/resolv.conf
</code></pre>

<p>Once it&#8217;s set, not even the root can modify this file, so you have to remove <em>immutable</em> flag first before editing this file:</p>

<pre><code># chattr -i /etc/resolv.conf
</code></pre>

<p>I have not personally tested this method though, there might be some complaints by NetworkManager that it is not able to write to <code>/etc/resolv.conf</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora 18 LXDE Installation on Macbook]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/05/fedora-18-lxde-installation-on-macbook/"/>
    <updated>2013-04-05T11:36:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/05/fedora-18-lxde-installation-on-macbook</id>
    <content type="html"><![CDATA[<p>The installation process for Fedora 18 is way easier than its previous versions, the process is not that different from other laptops. Even for creating media, all I have to do is to burn it to a DVD (or create bootable USB if you downloaded a Live CD) which, in its previous version require me to tweak it or use reFit/reFind to boot the installer. The only struggle that I had was when I am creating a DVD on my Macbook&#8217;s superdrive, for some unknown reasons, it just couldn&#8217;t read what it burnt, it means it can&#8217;t boot into a newly burnt DVD. I have tried burning it using both Fedora 17 and Mac OSX 10.7, both failed, still can&#8217;t read what it burnt. So, my only solution is to go for an external DVD drive, which I had lying around inside my now ancient PC, I connected it using a SATA to USB cable, burn it, booted it, and it works!</p>

<p>So let&#8217;s go to the main point of this article, the installation process for Fedora 18 includes downloading media, making media, boot into the media, install and post-installation. You can also refer to <a href="http://docs.fedoraproject.org/">Fedora Documentation</a> for a detailed installation process.</p>

<!-- more -->


<h2>1. Downloading media</h2>

<p>Depending on your preferences, the DVD or LXDE Live Media version. Whichever you download, remember that EFI systems require you to download X86_64 (64-bit) architecture or it will not work (i386 is for 32-bit which you should avoid). DVD will neither boot from USB nor Live Media but DVD provides you with a wide range of package selection, you can choose to install Gnome, KDE etc. all from the DVD which is not present in Live CD installation.</p>

<h2>2. Making Media</h2>

<h3>a. Bootable DVD</h3>

<p>Once you have the DVD ISO, you can burn it using GUI CD burning program or cdrecord as follows:</p>

<pre><code># cdrecord -v -dao speed=8 dev=/dev/sr0 /path/to/ISO
</code></pre>

<p>You can omit &#8220;speed=8&#8221; option, but lower speeds reduce write errors. Refer to <a href="fosswire.com/post/2007/11/burning-cd-and-dvd-iso-images-with-cdrecord">FOSSwire</a> for detailed explanation of its options and cdrecord command.</p>

<h3>b. Bootable USB</h3>

<p>If you wanted to save a DVD, you can make a bootable USB drive, these steps are based on <a href="http://docs.fedoraproject.org/en-US/Fedora/18/html/Installation_Guide/Making_USB_Media-UNIX_Linux.html#Making_USB_Media-UNIX_Linux-RHEL_Fedora-dd">Fedora&#8217;s Documentation</a>:</p>

<p>1. Clear the first blocks of the USB drive, replace <code>/dev/sdX</code> with the correct device:</p>

<pre><code># dd if=/dev/zero of=/dev/sdX bs=1M count=100
</code></pre>

<p>2. Copy ISO to the device, replace <code>/dev/sdX</code> with the correct device and <code>path/to/fedora/dvd.iso</code> with the correct ISO file path:</p>

<pre><code># dd if=path/to/fedora/dvd.iso of=/dev/sdX
</code></pre>

<p>3. On my X86_64 DVD ISO, I realised that the ID field of the partition table entry is incorrect, so I used <code>fdisk</code> to correct the problem.</p>

<h2>3. Booting the installer</h2>

<p>1. Reboot Macbook<br/>
2. Hold option/alt key until boot medium selection menu appears<br/>
3. Insert the newly burnt DVD<br/>
4. Select &#8220;EFI Boot&#8221;<br/>
After this step, it will drop you into a grub prompt, don&#8217;t worry, it is a known bug listed <a href="http://fedoraproject.org/wiki/Common_F18_bugs#UEFI_boot_of_Fedora_18_CD_or_DVD_disc_on_Mac_hardware_falls_to_a_prompt">here</a>. So, enter the following command and it will boot normally:</p>

<pre><code>grub&gt; configfile (cd0,apple3)/EFI/BOOT/grub.cfg
</code></pre>

<p>5. Select either one from the grub menu</p>

<h2>4. Installation</h2>

<p>The installation for Fedora 18 is rather straightforward, there is a major UI rework for Fedora 18. One problem that I encountered during installation is the difficulties to create a custom partition. The process for creating and using LVM is very confusing , in traditional installation for creating and use LVM, the process is as follows:</p>

<p>1. Mark/Format partition as LVM<br/>
2. Create Volume Group from the LVM<br/>
3. Create Physical Volume from Volume Group</p>

<p>In the new installer, step 1-2 is not needed anymore, you go directly into creating Physical Volumes. When you selected the HDD to partition, a dialog will appear, and it let you select either BTRFS, LVM or standard partition type. If you selected LVM, you might found that there is no way to create Volume Group. In fact, it is created automatically if you create a filesystem such as /home. You can select which Volume Group this newly created filesystem/mount point goes into, which the installer should create for you if you don&#8217;t have one. You can modify this Volume Group&#8217;s name by clicking the modify button.</p>

<p>I also found that there is a problem when you want to use all remaining free space for a Volume Group. If you didn&#8217;t allocate all free space for newly created mount points/filesystems, it means that if your total free space is 100GB, and you want your Volume Group to use all 100GB, you can&#8217;t just allocate a total of 50GB for Fedora installation, it will result in a Volume Group of 50GB and not 100GB. This is also listed as known bugs <a href="http://fedoraproject.org/wiki/Common_F18_bugs#Difficult_to_install_to_free_space_within_an_existing_LVM_volume_group_.28VG.29">here</a>.</p>

<p>There are times where your installer will freeze/stuck when partitioning, I can move the mouse pointer, but everything you click will not respond, it is actually a focus problem, you just have to press ESC to remove the focus. It is listed <a href="http://fedoraproject.org/wiki/Common_F18_bugs#Installer_can_become_apparently_.27stuck.27_in_custom_partitioning_mode_due_to_window_focus_problems">here</a> as a known bug.</p>

<h2>5. Post installation</h2>

<h3>Package Updates</h3>

<p>The first and most important step in any fresh installation is to update packages to latest versions. On my Macbook, wireless isn&#8217;t working so I have to pop in my extra wireless USB for package updates, you can also use a wired connection which works out of the box.</p>

<h3>Nouveau Problems</h3>

<p>After update to kernel 3.8 from 3.6, I found that the boot splash is corrupted, part of the mouse pointer disappeared, what I mean is that the mouse pointer is working but the middle of the mouse becomes transparent. There is also a sudden freeze/stuck when booted into desktop environment. This is a problem applied to nouveau&#8217;s Kernel Mode Setting (KMS) on newer kernels (kernel 3.7 not tested) which is not yet fixed, so my solution is to install NVidia proprietary driver. Instructions can be found at <a href="http://www.if-not-true-then-false.com/2013/fedora-18-nvidia-guide/">http://www.if-not-true-then-false.com/2013/fedora-18-nvidia-guide/</a>, be sure to install packages for 3D acceleration packages if you plan on using it.</p>

<h3>Screen brightness not working on NVidia proprietary driver</h3>

<p>The directory <code>/sys/class/backlight</code> is now empty, this means you can&#8217;t control monitor brightness. You have to install nvidiabl driver for it to work.</p>

<pre><code>$ su -
# cd
# git clone https://github.com/guillaumezin/nvidiabl.git
# cd nvidiabl
# yum install dkms
# make dkms-install
# echo "blacklist apple\_bl &gt;&gt; /etc/modprobe.d/blacklist.conf"
# modprobe -r apple\_bl
# modprobe nvidiabl min=0 max=1050
# touch /etc/modprobe.d/nvidabl.conf &amp;&amp; echo "options nvidiabl min=0 max=1050" &gt; /etc/modprobe.d/nvidiabl.conf
</code></pre>

<p>You can adjust min and max options for nvidiabl, <code>max=1050</code> works best for me, it might different for you, <code>min=0</code> is able to turn off monitor, change to larger than 0 if you don&#8217;t want that.</p>

<p>References:<br/>
1. <a href="https://mknowles.com.au/wordpress/2012/01/30/fedora-16-fixing-the-macbook-51-nvidia-lcd-brightness/">https://mknowles.com.au/wordpress/2012/01/30/fedora-16-fixing-the-macbook-51-nvidia-lcd-brightness/</a><br/>
2. <a href="https://github.com/guillaumezin/nvidiabl">https://github.com/guillaumezin/nvidiabl</a></p>

<h3>Configuring sudo</h3>

<p>Personally, I prefer <code>sudo</code> over <code>su -c</code> command, it is also required for keyboard and monitor brightness control. It is actually up to your own preferences.</p>

<p>1. <code>$ su -c 'visudo'</code><br/>
2. Add <code>ALL=(ALL) ALL</code> (change user with your ) line below <code>root    ALL=(ALL) ALL</code> line without quotes<br/>
3a. Add the following lines to the end if you want keyboard brightness control as well:</p>

<pre><code>## Allow user to execute without tty
Defaults:&lt;username&gt; !requiretty

## Allow user to execute without password
%&lt;username&gt;        ALL = NOPASSWD: /bin/chmod 666 /sys/class/backlight/nvidia_backlight/brightness, /bin/chmod 666 /sys/class/leds/smc\:\:kbd_backlight/brightness
</code></pre>

<p>3b. Add the following lines to the end if you don&#8217;t want keyboard brightness control:</p>

<pre><code>## Allow user to execute without tty
Defaults:&lt;username&gt; !requiretty

## Allow user to execute without password
%&lt;username&gt;        ALL = NOPASSWD: /bin/chmod 666 /sys/class/backlight/nvidia_backlight/brightness
</code></pre>

<p>4. Save and quit</p>

<p>Step 3 is optional to allow monitor and keyboard brightness control scripts to work. Skip this step if you don&#8217;t want it or have other methods for controls.</p>

<p><strong>NOTE:</strong> visudo uses vi editor, it starts in command mode, you can enter insert mode by pressing &#8216;i&#8217; and exit insert mode to go back to command mode by pressing ESC. Saving require you to enter :wq in command mode or by pressing ZZ in command mode.</p>

<p>References: <a href="http://fedorasolved.org/post-install-solutions/sudo">http://fedorasolved.org/post-install-solutions/sudo</a></p>

<h3>Screen brightness shortcuts</h3>

<p>1. Add the first script to <code>~/bin/backlightInc</code>:</p>

<pre><code>#!/bin/bash

#Brightness File
backlight="/sys/class/backlight/nvidia_backlight/brightness"
max=`cat "/sys/class/backlight/nvidia_backlight/max_brightness"`

current=$(cat $backlight)
new=$((current +10))
if [ $new -gt "$max" ]; then
        new=$max
fi

# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]; then
        sudo /bin/chmod 666 "$backlight"
fi

echo $new &gt; $backlight
</code></pre>

<p>2. Add the second script to <code>~/bin/backlightDec</code>:</p>

<pre><code>#!/bin/bash

backlight="/sys/class/backlight/nvidia_backlight/brightness"

current=$(cat $backlight)
new=$((current - 10))
if [ $new -lt 0 ]; then
        new=0
fi
# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty

if [ `stat -c %a "$backlight"` != 666 ]
then
        sudo /bin/chmod 666 "$backlight"
fi

echo $new &gt; $backlight
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x ~/bin/backlight\*
</code></pre>

<p>4. Edit <code>~/.config/openbox/lxde-rc.xml</code> with your favourite editor<br/>
5. Add the following lines after <code>&lt;keyboard&gt;</code> but before <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Monitor Brightness control --&gt;
    &lt;keybind key="XF86MonBrightnessDown"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;backlightDec&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86MonBrightnessUp"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;backlightInc&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>6. Reconfigure openbox:</p>

<pre><code>$ openbox --reconfigure
</code></pre>

<h3>Keyboard brightness shortcut</h3>

<p>If your Macbook does not come with keyboard brightness, skip this step.<br/>
1. Add the first script to <code>~/bin/kbdBacklightInc</code>:</p>

<pre><code>#!/bin/bash

#Brightness File
backlight="/sys/class/leds/smc::kbd_backlight/brightness"
max=`cat "/sys/class/leds/smc::kbd_backlight/max_brightness"`

current=$(cat $backlight)
new=$((current +5))
if [ $new -gt "$max" ]; then
        new=$max
fi

# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]; then
        `sudo /bin/chmod 666 "$backlight"`
fi

echo $new &gt; $backlight
</code></pre>

<p>2. Add the second script to <code>~/bin/kbdBrightnessDec</code>:</p>

<pre><code>#!/bin/bash

backlight="/sys/class/leds/smc::kbd_backlight/brightness"

current=$(cat $backlight)
new=$((current - 5))
if [ $new -lt 0 ]; then
        new=0
fi
# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]
then
        `sudo /bin/chmod 666 "$backlight"`
fi

echo $new &gt; $backlight
</code></pre>

<p>3. Add execute bit to both scripts:</p>

<pre><code>$ chmod +x ~/bin/kbdBacklight*
</code></pre>

<p>4. Edit <code>~/.config/openbox/lxde-rc.xml</code> with your favourite editor<br/>
5. Add the following lines after <code>&lt;keyboard&gt;</code> but before <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Keyboard brightness control --&gt;
    &lt;keybind key="XF86KbdBrightnessDown"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;kbdBacklightDec&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86KbdBrightnessUp"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;kbdBacklightInc&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>6. Reconfigure openbox:</p>

<pre><code>$ openbox --reconfigure
</code></pre>

<h3>Audio volume controls</h3>

<p>Edit <code>~/openbox/lxde-rc.xml</code> in your favourite editor and add the following lines between <code>&lt;keyboard&gt;</code> and <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Audio volume control --&gt;
    &lt;keybind key="XF86AudioLowerVolume"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer -c 0 set Master 5- unmute&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86AudioRaiseVolume"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer -c 0 set Master 5+ unmute&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86AudioMute"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer set Master toggle&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>References: <a href="http://wiki.lxde.org/en/LXDE:Questions#How_do_I_make_my_keyboard_volume_buttons_work.3F">http://wiki.lxde.org/en/LXDE:Questions#How_do_I_make_my_keyboard_volume_buttons_work.3F</a></p>

<h3>Wireless Driver</h3>

<p>For broadcom cards, you have two driver options, B43 or Broadcom-STA. From my experience Broadcom-STA bug fixes are rather slow, you often have to wait weeks or even months for a bug to be fixed, and sometimes, they won&#8217;t be fixed for versions/forever, so, I recommend that you only use Broadcom-STA only when you encounter problems with B43 driver. Please refer to B43 wireless driver page for B43 driver installation instructions and check driver compatibility.</p>

<h3>If you share data between Mac OSX and Fedora using soft/symbolic links AKA symlinks&#8230;</h3>

<p>You have to change your UID in Fedora to 501 or those directories will not be writable:</p>

<pre><code>$ sudo usermod -u 501
</code></pre>

<h3>Additional packages and configurations</h3>

<p>Once everything is working, you can install any additional packages, I included some package installation and configuration:</p>

<h4>Google Chome</h4>

<p>Refer to <a href="http://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/">Google Chrome Installation Fedora 18</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making EFI images for Fedora 18 on Macbook 5,1]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/05/making-efi-images-for-fedora-18-on-macbook-5/"/>
    <updated>2013-04-05T09:22:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/05/making-efi-images-for-fedora-18-on-macbook-5</id>
    <content type="html"><![CDATA[<p>When I was enabling the theme features on my Macbook Fedora, I found that there is not much guides on how to enable it on an EFI systems such as Macbook, most of the guides I found are for non-EFI systems. So I think it&#8217;s a good idea to create a simple guide for other people who encounter the same problem as me and for myself to refer in the future.</p>

<p>Grub require certain modules to enable/disable some features such as the support for themes. On an EFI systems like Macbook, you are required to create an EFI image with modules that support the feature. The first step of creating an EFI image is to determine the names and features of modules. Some grub shell commands such as linuxefi and initrdefi are crucial to boot Linux, make sure you don&#8217;t miss it when creating the image.</p>

<!-- more -->


<h2>1. Determining modules for the grub image</h2>

<p>When you issue <code>grub2-mkimage</code> command, it will look at the directory, <code>/usr/lib/grub/x86\_64-efi</code>, to find the modules specified in your command. A simple ls command will list all modules:</p>

<pre><code># ls /usr/lib/grub/x86\_64-efi/\*.mod
</code></pre>

<p>Unfortunately, it does not tell us what features each of these modules provide. Luckily, within this directory, it also provide <code>command.lst</code> that list what commands each modules provide:</p>

<pre><code># cat /usr/lib/grub/x86\_64-efi/command.lst
</code></pre>

<p>Other than commands, these modules also provide what filesystems and partition table that grub will support. The modules have a naming scheme, modules that start with &#8220;part_&#8221; are for partition tables and modules with filesystem names are filesystems to support, such as <code>ext3.mod</code>.</p>

<p>Write down any features that you need on a text file with space separated for each modules and trailing <code>.mod</code> or <code>.module</code>, e.g. <code>part_msdos part_gpt ext3 ext4</code>, note that <strong>partition tables come first, filesystem types come second, and any other modules come last</strong>.</p>

<p><strong>NOTE:</strong> On some systems, you can include all modules the following command where ~/modules is the text file for the modules you need. This might not work on machines like mine:</p>

<pre><code># ls /usr/lib/grub/x86_64-efi/*.mod | cut -d/ -f6 | cut -d. -f1 | tr '\n' ' ' &gt; ~/modules
</code></pre>

<p>On my machine, including all modules does not work for me, but the following modules:</p>

<p><code>part_gpt part_msdos fat ext2 hfs hfsplus chain boot configfile normal minicmd linuxefi reboot halt search gfxterm gfxmenu efi_gop efi_uga all_video loadbios gzio echo true loadenv bitmap_scale font cat help ls png jpeg tga test</code></p>

<h2>2. Creating grub image</h2>

<p>Grub2 EFI image can be created using <code>grub2-mkimage</code>, some machine might use <code>grub-mkimage</code>, it&#8217;s the same thing:</p>

<pre><code># grub2-mkimage -p /boot/efi/EFI/fedora -o /boot/efi/EFI/fedora/grubx64.efi `cat ~/modules`
</code></pre>

<p>This command will create a grub image in <code>/boot/efi/EFI/fedora/grubx64.efi</code> and will look in directory <code>/boot/efi/EFI/fedora/</code> directory for config file, options are explained as follows:</p>

<p><em>-p /boot/efi/EFI/fedora:</em> This option will ask grub to look for the config file on /boot/efi/EFI/fedora directory<br />
<em>-o /boot/efi/EFI/fedora/grubx64.efi:</em> This option will create the image as grubx64.efi in /boot/efi/EFI/fedora directory<br />
<em>`cat ~/modules`:</em> This will print all modules listed in the text file ~/modules for grub2-mkimage to process, you can change this to the text file you store your modules</p>

<p>This configuration also assume that your efi images are stored in <code>/boot/efi/EFI/fedora</code> directory, it is a requirement to create an HFS partition and mount it in <code>/boot/efi</code> for my macbook to boot, if you use a different directory under /boot/efi/EFI, change it, e.g. <code>/boot/ef/EFI/redhat</code> if it is stored in <code>/boot/efi/EFI/redhat</code>.</p>

<p>It is best to create a config file in your <code>/boot/efi/EFI/fedora</code> directory if it is not present, by issuing <code>grub2-mkconfig</code> command:</p>

<pre><code># grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
</code></pre>

<p>This will create a config file in <code>/boot/efi/EFI/fedora/grub.cfg</code>, you may have to adjust the output file path if you specify a different path to grub2-mkimage&#8217;s -p option.</p>

<h2>3. Blessing grubx64.efi image for pure EFI boot</h2>

<p>If you are using reFit or reFind, you can avoid this step as it will find your grub image dynamically, but if you want a pure EFI boot, you have to bless it using Mac OSX&#8217;s <code>bless</code> command. You can either boot into recovery mode or Mac OSX to use this command (it is possible to bless it in your Linux machine by installing certain package, use <code>yum provides bless</code> on Fedora to search for the package that provides the <code>bless</code> command, but I have not personally tested it yet). Personally, I prefer to boot into recovery of Mac OSX Lion to use the bless command because it is much faster.</p>

<p>Once booted, you have to search for the full path of your grub image (grubx64.efi), on my system, it is in /Volumes/EFI_Boot/EFI/, and issue the following command:</p>

<pre><code>$ sudo bless --folder /Volumes/EFI_Boot/EFI/fedora --file /Volumes/EFI_Boot/EFI/fedora/grubx64.efi
</code></pre>

<p>Once done, you can reboot your machine and hold option/alt key to find that your grub image is listed.</p>
]]></content>
  </entry>
  
</feed>
