<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2013-06-16T16:05:05+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing Multiple Tracks VCD on Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux/"/>
    <updated>2013-06-16T13:43:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/16/playing-multiple-tracks-vcd-on-linux</id>
    <content type="html"><![CDATA[<p>I have bought a VCD movie recently to find that it was not playable on my OpenSUSE, CD2 works fine but not CD1. Then I go back for a replacement disc on the shop and came back to watch it but unfortunately, the problem persist. The problem is that CD1 comtains multiple tracks that most Mediaplayer doesn't support (tried VLC and Kaffeine). So I started to dive into the problems and found a thread that provides useful information on playing VCD on Linux (Refer to references).</p>

<!-- more -->


<p>Basically there are two ways to work around this problem:<br/>
1. Use MPlayer to play your disc<br/>
2. Rip your VCD using vcdxrip</p>

<h2>1. Use MPlayer to play your dics</h2>

<p>MPlayer was quite new to me actually, it is launched through the console, and it is does not appear in the menu. Here is the command to play VCD using MPlayer (install if you haven't already):</p>

<pre><code>mplayer vcd://&lt;track number&gt; -cdrom-device /dev/&lt;your cd rom device&gt;
</code></pre>

<p>Of course, you have to substitute <code>&lt;track number&gt;</code> and <code>&lt;your cd rom device&gt;</code> with the track number and your cd rom device. On my machine, it's on track 3 and my cd rom device is either dvd or sr0 (dvd is a symlink to sr0). So my complete command is:</p>

<pre><code>mplayer vcd://3 -cdrom-device /dev/sr0
</code></pre>

<p>Refer to mplayer's manpage for controls and details: <code>man mplayer</code>.</p>

<h2>2. Rip your VCD using vcdxrip</h2>

<p>This has not personally worked for me because it keeps stopping at certain points, it just doesn't copy the whole VCD. But it is still good to know if MPlayer does not work. The command is very easy and straight forward. Remember to change to a directory for your ripped files before executing this command:</p>

<pre><code>vcdxrip -C
</code></pre>

<p>And there will be multiple files present on your currect directory, where you could play using VLC or whatever media player you may wish.</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.mplayerhq.hu/DOCS/HTML/en/vcd.html">MPlayer with VCD</a></li>
<li><a href="http://forums.linuxmint.com/viewtopic.php?f=48&amp;t=43106">Forums discussing issues with VCDs</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Juniper VPN on 64 bit Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux/"/>
    <updated>2013-05-18T18:21:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>When I was supporting a company that uses Juniper VPN with my colleague, I found that Juniper VPN is only supported in 32-bit version of Linux (though it was supported in 64-bit Windows and Mac machine, should ask them why they don't compile it for 64-bit Linux). I have spent hours finding solution to this situation and found one particular solution that just works. Tried <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a> but it didn't work for some unknown reasons.</p>

<!-- more -->


<p>This solution is based on <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a>, all credits goes to him/her.</p>

<h2>Requirements</h2>

<p>To use Juniper VPN, JRE or JDK with web plugins is a must (<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download Here</a>), it does not work with IcedTea and openJDK. We are not using any third party solution, so we have to comply to the Juniper VPN's system requirements.</p>

<h2>Steps</h2>

<p>1. Download Juniper VPN through the software provided by the company. Once the applet is loaded, it should ask you for your root/su password, just press [Enter] twice. It will create <code>.juniper_networks</code> in your home directory.<br/>
<span class='caption-wrapper center'><img class='caption' src='/images/juniper-loading.png' width='' height='' alt=''Juniper VPN Loading Screen'' title=''Juniper VPN Loading Screen''><span class='caption-text'>'Juniper VPN Loading Screen'</span></span>
<span class='caption-wrapper center'><img class='caption' src='/images/juniper-pwdprompt.png' width='' height='' alt=''Juniper VPN Password Prompt'' title=''Juniper VPN Password Prompt''><span class='caption-text'>'Juniper VPN Password Prompt'</span></span></p>

<p>2. Change directory to <code>$HOME/.juniper_networks</code></p>

<pre><code>cd $HOME/.juniper_networks
</code></pre>

<p>3. Remove <code>network_connect</code> directory</p>

<pre><code>rm -rf network_connect
</code></pre>

<p>4. Extract <code>ncLinuxApp.jar</code></p>

<pre><code>unzip ncLinuxApp.jar
</code></pre>

<p>5. Use <code>ldd</code> to find out required libraries for <code>network_connect/libncui.so</code> and <code>zypper wp &lt;library&gt;</code> or <code>yum provides &lt;library&gt;</code> to find out the libraries.</p>

<p>6. Make a binary out of the library</p>

<pre><code>gcc -m32 -Wl,-rpath,`pwd` -o network_connect/ncui network_connect/libncui.so
</code></pre>

<p>7. Set permission and owner/group</p>

<pre><code>sudo chown root:root network_connect/ncui
sudo chmod 6711 network_connect/ncui
</code></pre>

<p>8. Get the certificate</p>

<pre><code>sh network_connect/ncui &lt;your Juniper VPN host&gt; &lt;certificatename&gt;.cer
</code></pre>

<p>9. Make sure that you are still logged into you VPN host, and find your DSID by browsing though your browser's cookie of your VPN site. Search for the cookie named DSID</p>

<p>10. Connect to Juniper VPN</p>

<pre><code>network_connect/ncui -h &lt;you Juniper VPN host&gt; -c DSID=&lt;value obtained in step 9&gt; -f &lt;certificate obtained in step 8&gt;.cer
</code></pre>

<p>11. (Optional) To ease future VPN connections, copy and paste the following script to <code>$HOME/bin/vpnConnect</code></p>

<pre><code>#!/bin/bash

if [ $# -lt 1 ]; then
        echo -e "Usage:\t$0 &lt;DSID&gt;"
        echo -e "\n\tNOTE: DSID can be found in the cookie after you logged into your VPN site"
        exit 0
fi

# Connect to your VPN
~/.juniper_networks/network_connect/ncui -h &lt;your vpn host&gt; -c DSID=$1 -f ~/.juniper_networks/&lt;cert from step 8&gt;.cer
</code></pre>

<p>12. (Continue step 11) Add executable bit <code>chmod +x $HOME/bin/vpnConnect</code></p>

<p>13. (To connect after step 12) Use <code>vpnConnect &lt;your DSID as in step 9&gt;</code> to connect</p>

<h2>Alternative ways for shortening</h2>

<p>Personally I prefer to use a script to shorten my commands, because it allow me to specify usage notes and comments when the usage is not right, but if you are not like me, you can use Linux aliases to shorten it, refer to <code>man alias</code> for usage or Google it =)</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a><br/>
2. <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Linux Power Usage]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage/"/>
    <updated>2013-05-17T22:54:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage</id>
    <content type="html"><![CDATA[<p>A lot of Linux distro is not optimised for laptops, some of them could use up much power if you don't optimize it. By the end of this guide, you should be able to reduce your power consumption by 3-5 watts, I know it seems not much but it can give my machine 15-30 mins more power. By default, my machine used up more than 24 watts of power, as indicated by <code>powertop</code>. To find out the power usage of your machine:</p>

<!-- more -->


<p>1. Unplug or switch off your AC to your laptop<br/>
2. Enter <code>sudo /usr/sbin/powertop</code> in a terminal<br/>
<span class='caption-wrapper center'><img class='caption' src='/images/powertopOverview.png' width='' height='' alt=''The left most column is my power consumption in watts'' title=''The left most column is my power consumption in watts''><span class='caption-text'>'The left most column is my power consumption in watts'</span></span></p>

<p>To reduce the power consumption, I have installed <code>laptop-mode-tools</code>, as its name suggest, it is a tool for laptops. Once installed, I found that my wireless driver (<code>ath5k</code>) does not support power saving mode yet, so I have to disable it. Edit <code>/etc/laptop-mode/</code> and change <code>WIRELESS_BATT_POWER_SAVING=1 to WIRELESS_BATT_POWER_SAVING=0</code>, this step is optional, nothing might happen if you don't do anything to it.</p>

<p>To enable <code>laptop-mode</code>:</p>

<pre><code>$ sudo systemctl enable laptop-mode.service
</code></pre>

<p>Next, I created a custom script for <code>laptop-mode-tools</code> to enable certain power saving not included in <code>laptop-mode-tools</code> modules:</p>

<p>1. Edit <code>$HOME/bin/powersaving_on</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo low &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 1 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo Y &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 1500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>2. Edit <code>$HOME/bin/powersaving_off</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo default &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 2 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo N &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x $HOME/bin/powersaving_on; chmod +x $HOME/bin/powersaving_off
</code></pre>

<p>4. Create symbolic links for laptop-mode-tools:</p>

<pre><code>$ sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/batt-start/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/lm-ac-stop/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/batt-stop/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/lm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-stop/powersaving_off
</code></pre>

<p><strong>Explanation and Notes:</strong><br/>
<em>Step 1</em>: Enable some powersaving features to reduce power usage (require root permission), see the script's comments. You can change <code>echo low &gt; /sys/class/drm/card0/device/power_profile</code> to <code>echo mid &gt; /sys/class/drm/card0/device/power_profile</code> if you need more power</p>

<p><em>Step 2</em>: Disable powersaving features by setting all its values to default</p>

<p><em>Step 3</em>: Make both scripts executable</p>

<p><em>Step 4</em>: I have wrote it in a way that you can cut and paste into your terminal emulator in one step, just replace <code>&lt;username&gt;</code> with your username. <code>laptop-mode-tools</code> provide a way for users to execute certain scripts when on AC or battery by placing your scripts in its corresponding directories:</p>

<ul>
<li>/etc/laptop-mode/batt-start: Executed when laptop enters battery mode</li>
<li>/etc/laptop-mode/batt-stop: Executed when laptop exits battery mode</li>
<li>/etc/laptop-mode/lm-ac-start: Executed when <code>laptop-mode</code> is enabled AND laptop enters AC mode</li>
<li>/etc/laptop-mode/lm-ac-stop: Executed when <code>laptop-mode</code> is enabled AND laptop exits AC mode</li>
<li>/etc/laptop-mode/nolm-ac-start: Executed when <code>laptop-mode</code> is disabled through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop enters AC mode</li>
<li>/etc/laptop-mode/nolm-ac-stop: Executed when <code>laptop-mode</code> is disable through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop exits AC mode</li>
</ul>


<p><strong>Other Tips:</strong><br/>
1. Disable bluetooth: <code>sudo rfkill block bluetooth</code><br/>
2. It seems that monitor used up most power (11-18 watts depending on brightness on my machine), reduce brightness to save more power<br/>
3. Another power killer is WiFi, (more than 6 watts on my machine), so turn it off if you don't use it</p>

<p><strong>REFERENCES:</strong><br/>
1. <a href="https://wiki.archlinux.org/index.php/Power_saving">Great ArchWiki Article on Power Saving</a><br/>
2. <a href="http://aubreypwd.com/blog/2012/09/14/howto-ubuntu-12-04-open-source-radeon-drivers-and-power-management/">ATI Radeon Power Management Guide</a><br/>
3. <a href="http://www.linuxjournal.com/article/7539?page=0,1">Linux Journal Article on laptop-mode-tools</a><br/>
4. <a href="http://www.overclock.net/t/731469/how-to-power-saving-with-the-radeon-driver">Using ATI Radeon Power Management with laptop-mode-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S2ram as default suspending method]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method/"/>
    <updated>2013-05-12T23:45:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method</id>
    <content type="html"><![CDATA[<p>When I installed OpenSuSE 12.3 on my VAIO laptop, suspend is not working (not even <code>suspend</code> command). Instead, I have to issue <code>s2ram</code> command in OpenSuSE to suspend my machine. To make it the default sleep module (<code>uswsusp</code>), here are the steps required:</p>

<!-- more -->


<p>1. Edit <code>/etc/pm/config.d/module</code> and add the following line:</p>

<pre><code>SLEEP_MODULE=uswsusp
</code></pre>

<p>2. Edit <code>/etc/pm/config.d/defaults</code> and add the following line:</p>

<pre><code>S2RAM_OPTS="-f"
</code></pre>

<p>3. Reboot and it will go to sleep again.</p>

<p><strong>REFERENCES</strong><br/>
1. <a href="http://en.opensuse.org/SDB:Suspend_to_RAM">OpenSuSE Documentation</a><br/>
2. <a href="http://askubuntu.com/questions/54591/use-s2ram-when-closing-lid-with-kde">Ask Ubuntu Thread</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing incorrect lid state]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state/"/>
    <updated>2013-04-29T12:32:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state</id>
    <content type="html"><![CDATA[<p>When I install a Linux distro to my VAIO notebook, I found that there is an annoying bug with the lid switch. It does not get updated whenever I suspend on lid close, it means <code>cat /proc/acpi/button/lid/LID/state</code> will output <code>state:   close</code>. When I close the lid again, it won't suspend, instead, it will change the state to open. So in order for it to suspend again on lid close after the first suspend, I have to close it, reopen the lid and close it again.</p>

<p>I have tried installing Linux Mint, Fedora, Fuduntu and Xubuntu, but it is not fixed in any of the distros. So, I don't think it is distro problems. While researching this issues (which I spent two full days), I found that Linux got an amazing feature that enable users to dynamically loading DSDT at boot time, there is no need to update the BIOS. So here's the instuctions:</p>

<!-- more -->


<p>1. Install <code>iasl</code> using <code>yum</code>, <code>apt-get</code> or whatever package management you are using.</p>

<p>2. Extract DSDT:</p>

<pre><code>$ sudo cat /sys/firmware/acpi/tables/DSDT &gt; dsdt.aml
</code></pre>

<p>3. Disassemble <code>dsdt.aml</code> using the following command, this should create a new file <code>dsdt.dsl</code>:</p>

<pre><code>$ iasl -d dsdt.aml
</code></pre>

<p>4. Compile it using:</p>

<pre><code>$ iasl -tc dsdt.dsl
</code></pre>

<p>5. Fix any compiler errors, warnings and remarks. On my machine, the output is:</p>

<pre><code>dsdt.dsl  1352:                         And (CTRL, 0x1E)
Warning  1106 -                                 ^ Result is not used, operator has no effect

dsdt.dsl  1584:                     0x00000000,         // Length
Error    4122 -                              ^ Invalid combination of Length and Min/Max fixed flags

dsdt.dsl  2443:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)

dsdt.dsl  2521:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)
</code></pre>

<p>a. The first one is on line 1352 can be fixed simply by changing <code>And (CTRL, 0x1E)</code> to <code>And (CTRL, 0x1E, CTRL)</code>.</p>

<p>b. The second one is on line 1584, the length should be <code>Range Maximum</code> - <code>Range Minimum</code> + 1, on my machine, so fire up a hex calculator and start subtracting. On my machine, it's <code>0xE0000000</code> (<code>0xDFFFFFFF</code> - <code>0x00000000</code> + <code>0x00000001</code>).</p>

<p>c. The third and fourth line is on line 2443 and 2521, because it uses a reserved name, simply replacing all instances of <code>_T_0</code> to <code>T_0</code> will stop the complaints. In vim, it is as simple as issuing <code>:%s/_T_0/T_0/g</code> in command mode.</p>

<p>6. Once everything is fixed (no errors, warning or remarks), add the following line to <code>_WAK</code> method, simply search for <code>_WAK</code> in <code>dsdt.dsl</code>:</p>

<pre><code>If (LNotEqual (0x00, LIDS))
    {
        Store (0x00, LIDS)
        Notify (\_SB.LID, 0x80)
    }
</code></pre>

<p><strong>NOTE 1:</strong> You might need to change <code>\_SB.LID</code> to match your path to <code>LID</code> method or on some machine <code>LID0</code>. Method name is preceded by an <code>_</code> (underscore), so you can search for <code>_LID</code> in <code>dsdt.dsl</code>. After you found it, you have to determine the scope, scroll up until you found <code>Scope</code> keyword that your <code>LID</code> or <code>LID0</code> method belongs to, inside the bracket is the scope name. It may be in more than one scope, so, it might be <code>\_PCI0.SB.LID</code>. If you specify an incorrect path to <code>LID</code> method, you will receive the following error:</p>

<pre><code>dsdt.dsl   300:             Notify (LID, 0x80)
Error    4068 -                       ^ Object is not accessible from this scope (LID_)
</code></pre>

<p><strong>NOTE 2:</strong> What this function does is just to update the lid state once it is resumed from sleep. According to the ACPICA documentation, <code>_WAK</code> method is called by <code>AcpiLeaveSleepState()</code> function of ACPI. If the lid is open, the <code>LIDS</code> variable is <code>0x00</code>, or <code>0x01</code> otherwise. So these few lines translate to "if lid state is not open (closed), change lid state to open and call <code>LID</code> method".</p>

<p>7. Compile it using <code>iasl -tc dsdt.dsl</code>.</p>

<p>8. If no errors, warnings or remarks, add the following lines to <code>/etc/grub.d/01_acpi</code>:</p>

<pre><code># Uncomment to load custom ACPI table
GRUB_CUSTOM_ACPI="/boot/dsdt.aml"


# DON'T MODIFY ANYTHING BELOW THIS LINE!


prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib


. /usr/share/grub/grub-mkconfig_lib
#. ${libdir}/grub/grub-mkconfig_lib


# Load custom ACPI table
if [ x${GRUB_CUSTOM_ACPI} != x ] &amp;&amp; [ -f ${GRUB_CUSTOM_ACPI} ] \
    &amp;&amp; is_path_readable_by_grub ${GRUB_CUSTOM_ACPI}; then
    echo "Found custom ACPI table: ${GRUB_CUSTOM_ACPI}" &gt;&amp;2
    prepare_grub_to_access_device `${grub_probe} --target=device ${GRUB_CUSTOM_ACPI}` | sed -e "s/^/  /"
    cat &lt;&lt; EOF
acpi (\$root)`make_system_path_relative_to_its_root ${GRUB_CUSTOM_ACPI}`
EOF
fi
</code></pre>

<p>9. Add executable bit to it:</p>

<pre><code>$ sudo chmod +x /etc/grub.d/01_acpi
</code></pre>

<p>10. Copy the new <code>dsdt.aml</code> to <code>/boot</code>:</p>

<pre><code>$ sudo cp dsdt.aml /boot
</code></pre>

<p>11. Regenerate <code>grub.cfg</code>:</p>

<pre><code>$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>

<p>12. Reboot</p>

<h2>References</h2>

<ol>
<li><a href="https://wiki.archlinux.org/index.php/DSDT">Archwiki on DSDT</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=676031">Redhat's Bug Report</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/34389">Ubuntu's Bug Report 1</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/44825">Ubuntu's Bug Report 2</a></li>
<li><a href="http://sadevil.org/blog/2012/01/01/fixing-the-acpi-dsdt-of-an-acer-ferrari-one-200/">Somebody's blog on fixing DSDT errors, remarks and warnings</a></li>
<li><a href="https://www.acpica.org/documentation">ACPICA Documentation</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
