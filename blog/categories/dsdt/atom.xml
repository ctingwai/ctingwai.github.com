<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DSDT | Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/blog/categories/dsdt/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2013-06-22T18:00:10+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing incorrect lid state]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state/"/>
    <updated>2013-04-29T12:32:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state</id>
    <content type="html"><![CDATA[<p>When I install a Linux distro to my VAIO notebook, I found that there is an annoying bug with the lid switch. It does not get updated whenever I suspend on lid close, it means <code>cat /proc/acpi/button/lid/LID/state</code> will output <code>state:   close</code>. When I close the lid again, it won't suspend, instead, it will change the state to open. So in order for it to suspend again on lid close after the first suspend, I have to close it, reopen the lid and close it again.</p>

<p>I have tried installing Linux Mint, Fedora, Fuduntu and Xubuntu, but it is not fixed in any of the distros. So, I don't think it is distro problems. While researching this issues (which I spent two full days), I found that Linux got an amazing feature that enable users to dynamically loading DSDT at boot time, there is no need to update the BIOS. So here's the instuctions:</p>

<!-- more -->


<p>1. Install <code>iasl</code> using <code>yum</code>, <code>apt-get</code> or whatever package management you are using.</p>

<p>2. Extract DSDT:</p>

<pre><code>$ sudo cat /sys/firmware/acpi/tables/DSDT &gt; dsdt.aml
</code></pre>

<p>3. Disassemble <code>dsdt.aml</code> using the following command, this should create a new file <code>dsdt.dsl</code>:</p>

<pre><code>$ iasl -d dsdt.aml
</code></pre>

<p>4. Compile it using:</p>

<pre><code>$ iasl -tc dsdt.dsl
</code></pre>

<p>5. Fix any compiler errors, warnings and remarks. On my machine, the output is:</p>

<pre><code>dsdt.dsl  1352:                         And (CTRL, 0x1E)
Warning  1106 -                                 ^ Result is not used, operator has no effect

dsdt.dsl  1584:                     0x00000000,         // Length
Error    4122 -                              ^ Invalid combination of Length and Min/Max fixed flags

dsdt.dsl  2443:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)

dsdt.dsl  2521:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)
</code></pre>

<p>a. The first one is on line 1352 can be fixed simply by changing <code>And (CTRL, 0x1E)</code> to <code>And (CTRL, 0x1E, CTRL)</code>.</p>

<p>b. The second one is on line 1584, the length should be <code>Range Maximum</code> - <code>Range Minimum</code> + 1, on my machine, so fire up a hex calculator and start subtracting. On my machine, it's <code>0xE0000000</code> (<code>0xDFFFFFFF</code> - <code>0x00000000</code> + <code>0x00000001</code>).</p>

<p>c. The third and fourth line is on line 2443 and 2521, because it uses a reserved name, simply replacing all instances of <code>_T_0</code> to <code>T_0</code> will stop the complaints. In vim, it is as simple as issuing <code>:%s/_T_0/T_0/g</code> in command mode.</p>

<p>6. Once everything is fixed (no errors, warning or remarks), add the following line to <code>_WAK</code> method, simply search for <code>_WAK</code> in <code>dsdt.dsl</code>:</p>

<pre><code>If (LNotEqual (0x00, LIDS))
    {
        Store (0x00, LIDS)
        Notify (\_SB.LID, 0x80)
    }
</code></pre>

<p><strong>NOTE 1:</strong> You might need to change <code>\_SB.LID</code> to match your path to <code>LID</code> method or on some machine <code>LID0</code>. Method name is preceded by an <code>_</code> (underscore), so you can search for <code>_LID</code> in <code>dsdt.dsl</code>. After you found it, you have to determine the scope, scroll up until you found <code>Scope</code> keyword that your <code>LID</code> or <code>LID0</code> method belongs to, inside the bracket is the scope name. It may be in more than one scope, so, it might be <code>\_PCI0.SB.LID</code>. If you specify an incorrect path to <code>LID</code> method, you will receive the following error:</p>

<pre><code>dsdt.dsl   300:             Notify (LID, 0x80)
Error    4068 -                       ^ Object is not accessible from this scope (LID_)
</code></pre>

<p><strong>NOTE 2:</strong> What this function does is just to update the lid state once it is resumed from sleep. According to the ACPICA documentation, <code>_WAK</code> method is called by <code>AcpiLeaveSleepState()</code> function of ACPI. If the lid is open, the <code>LIDS</code> variable is <code>0x00</code>, or <code>0x01</code> otherwise. So these few lines translate to "if lid state is not open (closed), change lid state to open and call <code>LID</code> method".</p>

<p>7. Compile it using <code>iasl -tc dsdt.dsl</code>.</p>

<p>8. If no errors, warnings or remarks, add the following lines to <code>/etc/grub.d/01_acpi</code>:</p>

<pre><code># Uncomment to load custom ACPI table
GRUB_CUSTOM_ACPI="/boot/dsdt.aml"


# DON'T MODIFY ANYTHING BELOW THIS LINE!


prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib


. /usr/share/grub/grub-mkconfig_lib
#. ${libdir}/grub/grub-mkconfig_lib


# Load custom ACPI table
if [ x${GRUB_CUSTOM_ACPI} != x ] &amp;&amp; [ -f ${GRUB_CUSTOM_ACPI} ] \
    &amp;&amp; is_path_readable_by_grub ${GRUB_CUSTOM_ACPI}; then
    echo "Found custom ACPI table: ${GRUB_CUSTOM_ACPI}" &gt;&amp;2
    prepare_grub_to_access_device `${grub_probe} --target=device ${GRUB_CUSTOM_ACPI}` | sed -e "s/^/  /"
    cat &lt;&lt; EOF
acpi (\$root)`make_system_path_relative_to_its_root ${GRUB_CUSTOM_ACPI}`
EOF
fi
</code></pre>

<p>9. Add executable bit to it:</p>

<pre><code>$ sudo chmod +x /etc/grub.d/01_acpi
</code></pre>

<p>10. Copy the new <code>dsdt.aml</code> to <code>/boot</code>:</p>

<pre><code>$ sudo cp dsdt.aml /boot
</code></pre>

<p>11. Regenerate <code>grub.cfg</code>:</p>

<pre><code>$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>

<p>12. Reboot</p>

<h2>References</h2>

<ol>
<li><a href="https://wiki.archlinux.org/index.php/DSDT">Archwiki on DSDT</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=676031">Redhat's Bug Report</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/34389">Ubuntu's Bug Report 1</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/44825">Ubuntu's Bug Report 2</a></li>
<li><a href="http://sadevil.org/blog/2012/01/01/fixing-the-acpi-dsdt-of-an-acer-ferrari-one-200/">Somebody's blog on fixing DSDT errors, remarks and warnings</a></li>
<li><a href="https://www.acpica.org/documentation">ACPICA Documentation</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
