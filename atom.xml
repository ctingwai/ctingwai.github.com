<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2013-05-18T02:21:33+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimizing Linux Power Usage]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage/"/>
    <updated>2013-05-17T22:54:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/17/optimizing-linux-power-usage</id>
    <content type="html"><![CDATA[<p>A lot of Linux distro is not optimised for laptops, some of them could use up much power if you don&#8217;t optimize it. By the end of this guide, you should be able to reduce your power consumption by 3-5 watts, I know it seems not much but it can give my machine 15-30 mins more power. By default, my machine used up more than 24 watts of power, as indicated by <code>powertop</code>. To find out the power usage of your machine:</p>

<p>1. Unplug or switch off your AC to your laptop<br/>
2. Enter <code>sudo /usr/sbin/powertop</code> in a terminal<br/>
<span class='caption-wrapper center'><img class='caption' src='http://ctingwai.github.com/images/powertopOverview.png' width='' height='' alt=''The left most column is my power consumption in watts'' title=''The left most column is my power consumption in watts''><span class='caption-text'>&#8216;The left most column is my power consumption in watts&#8217;</span></span></p>

<p>To reduce the power consumption, I have installed <code>laptop-mode-tools</code>, as its name suggest, it is a tool for laptops. Once installed, I found that my wireless driver (<code>ath5k</code>) does not support power saving mode yet, so I have to disable it. Edit <code>/etc/laptop-mode/</code> and change <code>WIRELESS_BATT_POWER_SAVING=1 to WIRELESS_BATT_POWER_SAVING=0</code>, this step is optional, nothing might happen if you don&#8217;t do anything to it.</p>

<p>To enable <code>laptop-mode</code>:</p>

<pre><code>$ sudo systemctl enable laptop-mode.service
</code></pre>

<p>Next, I created a custom script for <code>laptop-mode-tools</code> to enable certain power saving not included in <code>laptop-mode-tools</code> modules:</p>

<p>1. Edit <code>$HOME/bin/powersaving_on</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo low &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 1 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo Y &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 1500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>2. Edit <code>$HOME/bin/powersaving_off</code> and add the following lines:</p>

<pre><code>#!/bin/sh

# ATI Radeon power saving
echo profile &gt; /sys/class/drm/card0/device/power_method
echo default &gt; /sys/class/drm/card0/device/power_profile

# Audio power saving
echo 2 &gt; /sys/module/snd_hda_intel/parameters/power_save
echo N &gt; /sys/module/snd_hda_intel/parameters/power_save_controller

# Writeback time
echo 500 &gt; /proc/sys/vm/dirty_writeback_centisecs
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x $HOME/bin/powersaving_on; chmod +x $HOME/bin/powersaving_off
</code></pre>

<p>4. Create symbolic links for laptop-mode-tools:</p>

<pre><code>$ sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/batt-start/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_on /etc/laptop-mode/lm-ac-stop/powersaving_on;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/batt-stop/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/lm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-start/powersaving_off;\
sudo ln -s /home/&lt;username&gt;/bin/powersaving_off /etc/laptop-mode/nolm-ac-stop/powersaving_off
</code></pre>

<p><strong>Explanation and Notes:</strong><br/>
<em>Step 1</em>: Enable some powersaving features to reduce power usage (require root permission), see the script&#8217;s comments. You can change <code>echo low &gt; /sys/class/drm/card0/device/power_profile</code> to <code>echo mid &gt; /sys/class/drm/card0/device/power_profile</code> if you need more power</p>

<p><em>Step 2</em>: Disable powersaving features by setting all its values to default</p>

<p><em>Step 3</em>: Make both scripts executable</p>

<p><em>Step 4</em>: I have wrote it in a way that you can cut and paste into your terminal emulator in one step, just replace <code>&lt;username&gt;</code> with your username. <code>laptop-mode-tools</code> provide a way for users to execute certain scripts when on AC or battery by placing your scripts in its corresponding directories:</p>

<ul>
<li>/etc/laptop-mode/batt-start: Executed when laptop enters battery mode</li>
<li>/etc/laptop-mode/batt-stop: Executed when laptop exits battery mode</li>
<li>/etc/laptop-mode/lm-ac-start: Executed when <code>laptop-mode</code> is enabled AND laptop enters AC mode</li>
<li>/etc/laptop-mode/lm-ac-stop: Executed when <code>laptop-mode</code> is enabled AND laptop exits AC mode</li>
<li>/etc/laptop-mode/nolm-ac-start: Executed when <code>laptop-mode</code> is disabled through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop enters AC mode</li>
<li>/etc/laptop-mode/nolm-ac-stop: Executed when <code>laptop-mode</code> is disable through <code>/etc/laptop-mode/laptop-mode.conf</code> AND laptop exits AC mode</li>
</ul>


<p><strong>Other Tips:</strong>
1. Disable bluetooth: <code>sudo rfkill block bluetooth</code><br/>
2. It seems that monitor used up most power (11-18 watts depending on brightness on my machine), reduce brightness to save more power
3. Another power killer is WiFi, (more than 6 watts on my machine), so turn it off if you don&#8217;t use it</p>

<p><strong>REFERENCES:</strong><br/>
1. <a href="https://wiki.archlinux.org/index.php/Power_saving">Great ArchWiki Article on Power Saving</a><br/>
2. <a href="http://aubreypwd.com/blog/2012/09/14/howto-ubuntu-12-04-open-source-radeon-drivers-and-power-management/">ATI Radeon Power Management Guide</a><br/>
3. <a href="http://www.linuxjournal.com/article/7539?page=0,1">Linux Journal Article on laptop-mode-tools</a><br/>
4. <a href="http://www.overclock.net/t/731469/how-to-power-saving-with-the-radeon-driver">Using ATI Radeon Power Management with laptop-mode-tools</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S2ram as default suspending method]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method/"/>
    <updated>2013-05-12T23:45:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/12/s2ram-as-default-suspending-method</id>
    <content type="html"><![CDATA[<p>When I installed OpenSuSE 12.3 on my VAIO laptop, suspend is not working (not even <code>suspend</code> command). Instead, I have to issue <code>s2ram</code> command in OpenSuSE to suspend my machine. To make it the default sleep module (<code>uswsusp</code>), here are the steps required:</p>

<p>1. Edit <code>/etc/pm/config.d/module</code> and add the following line:</p>

<pre><code>SLEEP_MODULE=uswsusp
</code></pre>

<p>2. Edit <code>/etc/pm/config.d/defaults</code> and add the following line:</p>

<pre><code>S2RAM_OPTS="-f"
</code></pre>

<p>3. Reboot and it will go to sleep again.</p>

<p><strong>REFERENCES</strong><br/>
1. <a href="http://en.opensuse.org/SDB:Suspend_to_RAM">OpenSuSE Documentation</a><br/>
2. <a href="http://askubuntu.com/questions/54591/use-s2ram-when-closing-lid-with-kde">Ask Ubuntu Thread</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing incorrect lid state]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state/"/>
    <updated>2013-04-29T12:32:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/29/fixing-incorrect-lid-state</id>
    <content type="html"><![CDATA[<p>When I install a Linux distro to my VAIO notebook, I found that there is an annoying bug with the lid switch. It does not get updated whenever I suspend on lid close, it means <code>cat /proc/acpi/button/lid/LID/state</code> will output <code>state:   close</code>. When I close the lid again, it won&#8217;t suspend, instead, it will change the state to open. So in order for it to suspend again on lid close after the first suspend, I have to close it, reopen the lid and close it again.</p>

<p>I have tried installing Linux Mint, Fedora, Fuduntu and Xubuntu, but it is not fixed in any of the distros. So, I don&#8217;t think it is distro problems. While researching this issues (which I spent two full days), I found that Linux got an amazing feature that enable users to dynamically loading DSDT at boot time, there is no need to update the BIOS. So here&#8217;s the instuctions:</p>

<p>1. Install <code>iasl</code> using <code>yum</code>, <code>apt-get</code> or whatever package management you are using.</p>

<p>2. Extract DSDT:</p>

<pre><code>$ sudo cat /sys/firmware/acpi/tables/DSDT &gt; dsdt.aml
</code></pre>

<p>3. Disassemble <code>dsdt.aml</code> using the following command, this should create a new file <code>dsdt.dsl</code>:</p>

<pre><code>$ iasl -d dsdt.aml
</code></pre>

<p>4. Compile it using:</p>

<pre><code>$ iasl -tc dsdt.dsl
</code></pre>

<p>5. Fix any compiler errors, warnings and remarks. On my machine, the output is:</p>

<pre><code>dsdt.dsl  1352:                         And (CTRL, 0x1E)
Warning  1106 -                                 ^ Result is not used, operator has no effect

dsdt.dsl  1584:                     0x00000000,         // Length
Error    4122 -                              ^ Invalid combination of Length and Min/Max fixed flags

dsdt.dsl  2443:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)

dsdt.dsl  2521:                                 Name (_T_0, 0x00)
Remark   5111 -            Use of compiler reserved name ^  (_T_0)
</code></pre>

<p>a. The first one is on line 1352 can be fixed simply by changing <code>And (CTRL, 0x1E)</code> to <code>And (CTRL, 0x1E, CTRL)</code>.</p>

<p>b. The second one is on line 1584, the length should be <code>Range Maximum</code> - <code>Range Minimum</code> + 1, on my machine, so fire up a hex calculator and start subtracting. On my machine, it&#8217;s <code>0xE0000000</code> (<code>0xDFFFFFFF</code> - <code>0x00000000</code> + <code>0x00000001</code>).</p>

<p>c. The third and fourth line is on line 2443 and 2521, because it uses a reserved name, simply replacing all instances of <code>_T_0</code> to <code>T_0</code> will stop the complaints. In vim, it is as simple as issuing <code>:%s/_T_0/T_0/g</code> in command mode.</p>

<p>6. Once everything is fixed (no errors, warning or remarks), add the following line to <code>_WAK</code> method, simply search for <code>_WAK</code> in <code>dsdt.dsl</code>:</p>

<pre><code>If (LNotEqual (0x00, LIDS))
    {
        Store (0x00, LIDS)
        Notify (\_SB.LID, 0x80)
    }
</code></pre>

<p><strong>NOTE 1:</strong> You might need to change <code>\_SB.LID</code> to match your path to <code>LID</code> method or on some machine <code>LID0</code>. Method name is preceded by an <code>_</code> (underscore), so you can search for <code>_LID</code> in <code>dsdt.dsl</code>. After you found it, you have to determine the scope, scroll up until you found <code>Scope</code> keyword that your <code>LID</code> or <code>LID0</code> method belongs to, inside the bracket is the scope name. It may be in more than one scope, so, it might be <code>\_PCI0.SB.LID</code>. If you specify an incorrect path to <code>LID</code> method, you will receive the following error:</p>

<pre><code>dsdt.dsl   300:             Notify (LID, 0x80)
Error    4068 -                       ^ Object is not accessible from this scope (LID_)
</code></pre>

<p><strong>NOTE 2:</strong> What this function does is just to update the lid state once it is resumed from sleep. According to the ACPICA documentation, <code>_WAK</code> method is called by <code>AcpiLeaveSleepState()</code> function of ACPI. If the lid is open, the <code>LIDS</code> variable is <code>0x00</code>, or <code>0x01</code> otherwise. So these few lines translate to &#8220;if lid state is not open (closed), change lid state to open and call <code>LID</code> method&#8221;.</p>

<p>7. Compile it using <code>iasl -tc dsdt.dsl</code>.</p>

<p>8. If no errors, warnings or remarks, add the following lines to <code>/etc/grub.d/01_acpi</code>:</p>

<pre><code># Uncomment to load custom ACPI table
GRUB_CUSTOM_ACPI="/boot/dsdt.aml"


# DON'T MODIFY ANYTHING BELOW THIS LINE!


prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib


. /usr/share/grub/grub-mkconfig_lib
#. ${libdir}/grub/grub-mkconfig_lib


# Load custom ACPI table
if [ x${GRUB_CUSTOM_ACPI} != x ] &amp;&amp; [ -f ${GRUB_CUSTOM_ACPI} ] \
    &amp;&amp; is_path_readable_by_grub ${GRUB_CUSTOM_ACPI}; then
    echo "Found custom ACPI table: ${GRUB_CUSTOM_ACPI}" &gt;&amp;2
    prepare_grub_to_access_device `${grub_probe} --target=device ${GRUB_CUSTOM_ACPI}` | sed -e "s/^/  /"
    cat &lt;&lt; EOF
acpi (\$root)`make_system_path_relative_to_its_root ${GRUB_CUSTOM_ACPI}`
EOF
fi
</code></pre>

<p>9. Add executable bit to it:</p>

<pre><code>$ sudo chmod +x /etc/grub.d/01_acpi
</code></pre>

<p>10. Copy the new <code>dsdt.aml</code> to <code>/boot</code>:</p>

<pre><code>$ sudo cp dsdt.aml /boot
</code></pre>

<p>11. Regenerate <code>grub.cfg</code>:</p>

<pre><code>$ sudo grub2-mkconfig -o /boot/grub2/grub.cfg
</code></pre>

<p>12. Reboot</p>

<h2>References</h2>

<ol>
<li><a href="https://wiki.archlinux.org/index.php/DSDT">Archwiki on DSDT</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=676031">Redhat&#8217;s Bug Report</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/34389">Ubuntu&#8217;s Bug Report 1</a></li>
<li><a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/44825">Ubuntu&#8217;s Bug Report 2</a></li>
<li><a href="http://sadevil.org/blog/2012/01/01/fixing-the-acpi-dsdt-of-an-acer-ferrari-one-200/">Somebody&#8217;s blog on fixing DSDT errors, remarks and warnings</a></li>
<li><a href="https://www.acpica.org/documentation">ACPICA Documentation</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permanent DNS Settings for Network Manager]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager/"/>
    <updated>2013-04-23T16:39:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager</id>
    <content type="html"><![CDATA[<p>DNS settings in Linux are generally stored in <code>/etc/resolv.conf</code> file, you could basically just edit this file to change the DNS settings in any Linux systems. However, the change is not permanent, it will be overwritten by Network Manager when u reconnect or reboot. So, to make the change permanent, there are two methods, Network Manager&#8217;s dispatcher script method and the immutable flag method.</p>

<h2>Using Network Manager&#8217;s Dispatcher Method</h2>

<p>This solution is based on <a href="https://wiki.archlinux.org/index.php/NetworkManager#Use_OpenDNS_servers">ArchWiki</a>. Basically, the steps are:</p>

<p>1. Become root and create a new file <code>/etc/resolv.conf.googledns</code>.</p>

<p>2. Edit <code>/etc/resolv.conf.googledns</code> and add the following lines:</p>

<pre><code>nameserver 8.8.8.8
nameserver 8.8.4.4
</code></pre>

<p>3. Add the following line to <code>/etc/NetworkManager/dispatcher.d/12-dns_server</code>:</p>

<pre><code>cp -f /etc/resolv.conf.googledns /etc/resolv.conf
</code></pre>

<p>4. Add executable bit to the script:</p>

<pre><code># chmod +x /etc/NetworkManager/dispatcher.d/12-dns_server
</code></pre>

<p>5. Restart Network Manager:</p>

<pre><code># systemctl restart NetworkManager
</code></pre>

<p>What these steps do is just to replace <code>/etc/resolv.conf</code> with the file <code>/etc/resolv.conf.googledns</code> everytime you connect.</p>

<h2>Immutable Flag Method</h2>

<p>You can also try adding <em>immutable</em> flag to <code>/etc/resolv.conf</code> once you have changed the DNS (<code>nameserver</code> field) in <code>/etc/resolv.conf</code> file:</p>

<pre><code># chattr +i /etc/resolv.conf
</code></pre>

<p>Once it&#8217;s set, not even the root can modify this file, so you have to remove <em>immutable</em> flag first before editing this file:</p>

<pre><code># chattr -i /etc/resolv.conf
</code></pre>

<p>I have not personally tested this method though, there might be some complaints by NetworkManager that it is not able to write to <code>/etc/resolv.conf</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora 18 LXDE Installation on Macbook]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/05/fedora-18-lxde-installation-on-macbook/"/>
    <updated>2013-04-05T11:36:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/05/fedora-18-lxde-installation-on-macbook</id>
    <content type="html"><![CDATA[<p>The installation process for Fedora 18 is way easier than its previous versions, the process is not that different from other laptops. Even for creating media, all I have to do is to burn it to a DVD (or create bootable USB if you downloaded a Live CD) which, in its previous version require me to tweak it or use reFit/reFind to boot the installer. The only struggle that I had was when I am creating a DVD on my Macbook&#8217;s superdrive, for some unknown reasons, it just couldn&#8217;t read what it burnt, it means it can&#8217;t boot into a newly burnt DVD. I have tried burning it using both Fedora 17 and Mac OSX 10.7, both failed, still can&#8217;t read what it burnt. So, my only solution is to go for an external DVD drive, which I had lying around inside my now ancient PC, I connected it using a SATA to USB cable, burn it, booted it, and it works!</p>

<p>So let&#8217;s go to the main point of this article, the installation process for Fedora 18 includes downloading media, making media, boot into the media, install and post-installation. You can also refer to <a href="http://docs.fedoraproject.org/">Fedora Documentation</a> for a detailed installation process.</p>

<h2>1. Downloading media</h2>

<p>Depending on your preferences, the DVD or LXDE Live Media version. Whichever you download, remember that EFI systems require you to download X86_64 (64-bit) architecture or it will not work (i386 is for 32-bit which you should avoid). DVD will neither boot from USB nor Live Media but DVD provides you with a wide range of package selection, you can choose to install Gnome, KDE etc. all from the DVD which is not present in Live CD installation.</p>

<h2>2. Making Media</h2>

<h3>a. Bootable DVD</h3>

<p>Once you have the DVD ISO, you can burn it using GUI CD burning program or cdrecord as follows:</p>

<pre><code># cdrecord -v -dao speed=8 dev=/dev/sr0 /path/to/ISO
</code></pre>

<p>You can omit &#8220;speed=8&#8221; option, but lower speeds reduce write errors. Refer to <a href="fosswire.com/post/2007/11/burning-cd-and-dvd-iso-images-with-cdrecord">FOSSwire</a> for detailed explanation of its options and cdrecord command.</p>

<h3>b. Bootable USB</h3>

<p>If you wanted to save a DVD, you can make a bootable USB drive, these steps are based on <a href="http://docs.fedoraproject.org/en-US/Fedora/18/html/Installation_Guide/Making_USB_Media-UNIX_Linux.html#Making_USB_Media-UNIX_Linux-RHEL_Fedora-dd">Fedora&#8217;s Documentation</a>:</p>

<p>1. Clear the first blocks of the USB drive, replace <code>/dev/sdX</code> with the correct device:</p>

<pre><code># dd if=/dev/zero of=/dev/sdX bs=1M count=100
</code></pre>

<p>2. Copy ISO to the device, replace <code>/dev/sdX</code> with the correct device and <code>path/to/fedora/dvd.iso</code> with the correct ISO file path:</p>

<pre><code># dd if=path/to/fedora/dvd.iso of=/dev/sdX
</code></pre>

<p>3. On my X86_64 DVD ISO, I realised that the ID field of the partition table entry is incorrect, so I used <code>fdisk</code> to correct the problem.</p>

<h2>3. Booting the installer</h2>

<p>1. Reboot Macbook<br/>
2. Hold option/alt key until boot medium selection menu appears<br/>
3. Insert the newly burnt DVD<br/>
4. Select &#8220;EFI Boot&#8221;<br/>
After this step, it will drop you into a grub prompt, don&#8217;t worry, it is a known bug listed <a href="http://fedoraproject.org/wiki/Common_F18_bugs#UEFI_boot_of_Fedora_18_CD_or_DVD_disc_on_Mac_hardware_falls_to_a_prompt">here</a>. So, enter the following command and it will boot normally:</p>

<pre><code>grub&gt; configfile (cd0,apple3)/EFI/BOOT/grub.cfg
</code></pre>

<p>5. Select either one from the grub menu</p>

<h2>4. Installation</h2>

<p>The installation for Fedora 18 is rather straightforward, there is a major UI rework for Fedora 18. One problem that I encountered during installation is the difficulties to create a custom partition. The process for creating and using LVM is very confusing , in traditional installation for creating and use LVM, the process is as follows:</p>

<p>1. Mark/Format partition as LVM<br/>
2. Create Volume Group from the LVM<br/>
3. Create Physical Volume from Volume Group</p>

<p>In the new installer, step 1-2 is not needed anymore, you go directly into creating Physical Volumes. When you selected the HDD to partition, a dialog will appear, and it let you select either BTRFS, LVM or standard partition type. If you selected LVM, you might found that there is no way to create Volume Group. In fact, it is created automatically if you create a filesystem such as /home. You can select which Volume Group this newly created filesystem/mount point goes into, which the installer should create for you if you don&#8217;t have one. You can modify this Volume Group&#8217;s name by clicking the modify button.</p>

<p>I also found that there is a problem when you want to use all remaining free space for a Volume Group. If you didn&#8217;t allocate all free space for newly created mount points/filesystems, it means that if your total free space is 100GB, and you want your Volume Group to use all 100GB, you can&#8217;t just allocate a total of 50GB for Fedora installation, it will result in a Volume Group of 50GB and not 100GB. This is also listed as known bugs <a href="http://fedoraproject.org/wiki/Common_F18_bugs#Difficult_to_install_to_free_space_within_an_existing_LVM_volume_group_.28VG.29">here</a>.</p>

<p>There are times where your installer will freeze/stuck when partitioning, I can move the mouse pointer, but everything you click will not respond, it is actually a focus problem, you just have to press ESC to remove the focus. It is listed <a href="http://fedoraproject.org/wiki/Common_F18_bugs#Installer_can_become_apparently_.27stuck.27_in_custom_partitioning_mode_due_to_window_focus_problems">here</a> as a known bug.</p>

<h2>5. Post installation</h2>

<h3>Package Updates</h3>

<p>The first and most important step in any fresh installation is to update packages to latest versions. On my Macbook, wireless isn&#8217;t working so I have to pop in my extra wireless USB for package updates, you can also use a wired connection which works out of the box.</p>

<h3>Nouveau Problems</h3>

<p>After update to kernel 3.8 from 3.6, I found that the boot splash is corrupted, part of the mouse pointer disappeared, what I mean is that the mouse pointer is working but the middle of the mouse becomes transparent. There is also a sudden freeze/stuck when booted into desktop environment. This is a problem applied to nouveau&#8217;s Kernel Mode Setting (KMS) on newer kernels (kernel 3.7 not tested) which is not yet fixed, so my solution is to install NVidia proprietary driver. Instructions can be found at <a href="http://www.if-not-true-then-false.com/2013/fedora-18-nvidia-guide/">http://www.if-not-true-then-false.com/2013/fedora-18-nvidia-guide/</a>, be sure to install packages for 3D acceleration packages if you plan on using it.</p>

<h3>Screen brightness not working on NVidia proprietary driver</h3>

<p>The directory <code>/sys/class/backlight</code> is now empty, this means you can&#8217;t control monitor brightness. You have to install nvidiabl driver for it to work.</p>

<pre><code>$ su -
# cd
# git clone https://github.com/guillaumezin/nvidiabl.git
# cd nvidiabl
# yum install dkms
# make dkms-install
# echo "blacklist apple\_bl &gt;&gt; /etc/modprobe.d/blacklist.conf"
# modprobe -r apple\_bl
# modprobe nvidiabl min=0 max=1050
# touch /etc/modprobe.d/nvidabl.conf &amp;&amp; echo "options nvidiabl min=0 max=1050" &gt; /etc/modprobe.d/nvidiabl.conf
</code></pre>

<p>You can adjust min and max options for nvidiabl, <code>max=1050</code> works best for me, it might different for you, <code>min=0</code> is able to turn off monitor, change to larger than 0 if you don&#8217;t want that.</p>

<p>References:<br/>
1. <a href="https://mknowles.com.au/wordpress/2012/01/30/fedora-16-fixing-the-macbook-51-nvidia-lcd-brightness/">https://mknowles.com.au/wordpress/2012/01/30/fedora-16-fixing-the-macbook-51-nvidia-lcd-brightness/</a><br/>
2. <a href="https://github.com/guillaumezin/nvidiabl">https://github.com/guillaumezin/nvidiabl</a></p>

<h3>Configuring sudo</h3>

<p>Personally, I prefer <code>sudo</code> over <code>su -c</code> command, it is also required for keyboard and monitor brightness control. It is actually up to your own preferences.</p>

<p>1. <code>$ su -c 'visudo'</code><br/>
2. Add <code>ALL=(ALL) ALL</code> (change user with your ) line below <code>root    ALL=(ALL) ALL</code> line without quotes<br/>
3a. Add the following lines to the end if you want keyboard brightness control as well:</p>

<pre><code>## Allow user to execute without tty
Defaults:&lt;username&gt; !requiretty

## Allow user to execute without password
%&lt;username&gt;        ALL = NOPASSWD: /bin/chmod 666 /sys/class/backlight/nvidia_backlight/brightness, /bin/chmod 666 /sys/class/leds/smc\:\:kbd_backlight/brightness
</code></pre>

<p>3b. Add the following lines to the end if you don&#8217;t want keyboard brightness control:</p>

<pre><code>## Allow user to execute without tty
Defaults:&lt;username&gt; !requiretty

## Allow user to execute without password
%&lt;username&gt;        ALL = NOPASSWD: /bin/chmod 666 /sys/class/backlight/nvidia_backlight/brightness
</code></pre>

<p>4. Save and quit</p>

<p>Step 3 is optional to allow monitor and keyboard brightness control scripts to work. Skip this step if you don&#8217;t want it or have other methods for controls.</p>

<p><strong>NOTE:</strong> visudo uses vi editor, it starts in command mode, you can enter insert mode by pressing &#8216;i&#8217; and exit insert mode to go back to command mode by pressing ESC. Saving require you to enter :wq in command mode or by pressing ZZ in command mode.</p>

<p>References: <a href="http://fedorasolved.org/post-install-solutions/sudo">http://fedorasolved.org/post-install-solutions/sudo</a></p>

<h3>Screen brightness shortcuts</h3>

<p>1. Add the first script to <code>~/bin/backlightInc</code>:</p>

<pre><code>#!/bin/bash

#Brightness File
backlight="/sys/class/backlight/nvidia_backlight/brightness"
max=`cat "/sys/class/backlight/nvidia_backlight/max_brightness"`

current=$(cat $backlight)
new=$((current +10))
if [ $new -gt "$max" ]; then
        new=$max
fi

# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]; then
        sudo /bin/chmod 666 "$backlight"
fi

echo $new &gt; $backlight
</code></pre>

<p>2. Add the second script to <code>~/bin/backlightDec</code>:</p>

<pre><code>#!/bin/bash

backlight="/sys/class/backlight/nvidia_backlight/brightness"

current=$(cat $backlight)
new=$((current - 10))
if [ $new -lt 0 ]; then
        new=0
fi
# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty

if [ `stat -c %a "$backlight"` != 666 ]
then
        sudo /bin/chmod 666 "$backlight"
fi

echo $new &gt; $backlight
</code></pre>

<p>3. Add executable bit to both scripts:</p>

<pre><code>$ chmod +x ~/bin/backlight\*
</code></pre>

<p>4. Edit <code>~/.config/openbox/lxde-rc.xml</code> with your favourite editor<br/>
5. Add the following lines after <code>&lt;keyboard&gt;</code> but before <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Monitor Brightness control --&gt;
    &lt;keybind key="XF86MonBrightnessDown"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;backlightDec&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86MonBrightnessUp"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;backlightInc&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>6. Reconfigure openbox:</p>

<pre><code>$ openbox --reconfigure
</code></pre>

<h3>Keyboard brightness shortcut</h3>

<p>If your Macbook does not come with keyboard brightness, skip this step.<br/>
1. Add the first script to <code>~/bin/kbdBacklightInc</code>:</p>

<pre><code>#!/bin/bash

#Brightness File
backlight="/sys/class/leds/smc::kbd_backlight/brightness"
max=`cat "/sys/class/leds/smc::kbd_backlight/max_brightness"`

current=$(cat $backlight)
new=$((current +5))
if [ $new -gt "$max" ]; then
        new=$max
fi

# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]; then
        `sudo /bin/chmod 666 "$backlight"`
fi

echo $new &gt; $backlight
</code></pre>

<p>2. Add the second script to <code>~/bin/kbdBrightnessDec</code>:</p>

<pre><code>#!/bin/bash

backlight="/sys/class/leds/smc::kbd_backlight/brightness"

current=$(cat $backlight)
new=$((current - 5))
if [ $new -lt 0 ]; then
        new=0
fi
# check the permissions of the `brightness_file'
# file and change them only if necessary
#
# for this to work you should have a line like
# %&lt;username&gt; ALL = NOPASSWD: /bin/chmod 666 &lt;path to the brightness file&gt;
# in /etc/sudoers
#
# (add this line using `visudo' as root)
#
# You might need to add the following line if you get an error about tty
# Defaults:&lt;username&gt; !requiretty


if [ `stat -c %a "$backlight"` != 666 ]
then
        `sudo /bin/chmod 666 "$backlight"`
fi

echo $new &gt; $backlight
</code></pre>

<p>3. Add execute bit to both scripts:</p>

<pre><code>$ chmod +x ~/bin/kbdBacklight*
</code></pre>

<p>4. Edit <code>~/.config/openbox/lxde-rc.xml</code> with your favourite editor<br/>
5. Add the following lines after <code>&lt;keyboard&gt;</code> but before <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Keyboard brightness control --&gt;
    &lt;keybind key="XF86KbdBrightnessDown"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;kbdBacklightDec&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86KbdBrightnessUp"&gt;
      &lt;action name="Execute"&gt;
        &lt;command&gt;kbdBacklightInc&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>6. Reconfigure openbox:</p>

<pre><code>$ openbox --reconfigure
</code></pre>

<h3>Audio volume controls</h3>

<p>Edit <code>~/openbox/lxde-rc.xml</code> in your favourite editor and add the following lines between <code>&lt;keyboard&gt;</code> and <code>&lt;/keyboard&gt;</code> tag:</p>

<pre><code>    &lt;!-- Audio volume control --&gt;
    &lt;keybind key="XF86AudioLowerVolume"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer -c 0 set Master 5- unmute&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86AudioRaiseVolume"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer -c 0 set Master 5+ unmute&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
    &lt;keybind key="XF86AudioMute"&gt;
      &lt;action name="Execute"&gt;
        &lt;startupnotify&gt;
          &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;name&gt;amixer&lt;/name&gt;
        &lt;/startupnotify&gt;
        &lt;command&gt;amixer set Master toggle&lt;/command&gt;
      &lt;/action&gt;
    &lt;/keybind&gt;
</code></pre>

<p>References: <a href="http://wiki.lxde.org/en/LXDE:Questions#How_do_I_make_my_keyboard_volume_buttons_work.3F">http://wiki.lxde.org/en/LXDE:Questions#How_do_I_make_my_keyboard_volume_buttons_work.3F</a></p>

<h3>Wireless Driver</h3>

<p>For broadcom cards, you have two driver options, B43 or Broadcom-STA. From my experience Broadcom-STA bug fixes are rather slow, you often have to wait weeks or even months for a bug to be fixed, and sometimes, they won&#8217;t be fixed for versions/forever, so, I recommend that you only use Broadcom-STA only when you encounter problems with B43 driver. Please refer to B43 wireless driver page for B43 driver installation instructions and check driver compatibility.</p>

<h3>If you share data between Mac OSX and Fedora using soft/symbolic links AKA symlinks&#8230;</h3>

<p>You have to change your UID in Fedora to 501 or those directories will not be writable:</p>

<pre><code>$ sudo usermod -u 501
</code></pre>

<h3>Additional packages and configurations</h3>

<p>Once everything is working, you can install any additional packages, I included some package installation and configuration:</p>

<h4>Google Chome</h4>

<p>Refer to <a href="http://www.if-not-true-then-false.com/2010/install-google-chrome-with-yum-on-fedora-red-hat-rhel/">Google Chrome Installation Fedora 18</a></p>

<h4>Conky</h4>

<p>Coming soon&#8230;</p>

<h4>XTerm</h4>

<p>Coming soon&#8230;</p>

<h4>ClamTK</h4>

<p>Coming soon&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making EFI images for Fedora 18 on Macbook 5,1]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/05/making-efi-images-for-fedora-18-on-macbook-5/"/>
    <updated>2013-04-05T09:22:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/05/making-efi-images-for-fedora-18-on-macbook-5</id>
    <content type="html"><![CDATA[<p>When I was enabling the theme features on my Macbook Fedora, I found that there is not much guides on how to enable it on an EFI systems such as Macbook, most of the guides I found are for non-EFI systems. So I think it&#8217;s a good idea to create a simple guide for other people who encounter the same problem as me and for myself to refer in the future.</p>

<p>Grub require certain modules to enable/disable some features such as the support for themes. On an EFI systems like Macbook, you are required to create an EFI image with modules that support the feature. The first step of creating an EFI image is to determine the names and features of modules. Some grub shell commands such as linuxefi and initrdefi are crucial to boot Linux, make sure you don&#8217;t miss it when creating the image.</p>

<h2>1. Determining modules for the grub image</h2>

<p>When you issue <code>grub2-mkimage</code> command, it will look at the directory, <code>/usr/lib/grub/x86\_64-efi</code>, to find the modules specified in your command. A simple ls command will list all modules:</p>

<pre><code># ls /usr/lib/grub/x86\_64-efi/\*.mod
</code></pre>

<p>Unfortunately, it does not tell us what features each of these modules provide. Luckily, within this directory, it also provide <code>command.lst</code> that list what commands each modules provide:</p>

<pre><code># cat /usr/lib/grub/x86\_64-efi/command.lst
</code></pre>

<p>Other than commands, these modules also provide what filesystems and partition table that grub will support. The modules have a naming scheme, modules that start with &#8220;part_&#8221; are for partition tables and modules with filesystem names are filesystems to support, such as <code>ext3.mod</code>.</p>

<p>Write down any features that you need on a text file with space separated for each modules and trailing <code>.mod</code> or <code>.module</code>, e.g. <code>part_msdos part_gpt ext3 ext4</code>, note that <strong>partition tables come first, filesystem types come second, and any other modules come last</strong>.</p>

<p><strong>NOTE:</strong> On some systems, you can include all modules the following command where ~/modules is the text file for the modules you need. This might not work on machines like mine:</p>

<pre><code># ls /usr/lib/grub/x86_64-efi/*.mod | cut -d/ -f6 | cut -d. -f1 | tr '\n' ' ' &gt; ~/modules
</code></pre>

<p>On my machine, including all modules does not work for me, but the following modules:</p>

<p><code>part_gpt part_msdos fat ext2 hfs hfsplus chain boot configfile normal minicmd linuxefi reboot halt search gfxterm gfxmenu efi_gop efi_uga all_video loadbios gzio echo true loadenv bitmap_scale font cat help ls png jpeg tga test</code></p>

<h2>2. Creating grub image</h2>

<p>Grub2 EFI image can be created using <code>grub2-mkimage</code>, some machine might use <code>grub-mkimage</code>, it&#8217;s the same thing:</p>

<pre><code># grub2-mkimage -p /boot/efi/EFI/fedora -o /boot/efi/EFI/fedora/grubx64.efi `cat ~/modules`
</code></pre>

<p>This command will create a grub image in <code>/boot/efi/EFI/fedora/grubx64.efi</code> and will look in directory <code>/boot/efi/EFI/fedora/</code> directory for config file, options are explained as follows:</p>

<p><em>-p /boot/efi/EFI/fedora:</em> This option will ask grub to look for the config file on /boot/efi/EFI/fedora directory<br />
<em>-o /boot/efi/EFI/fedora/grubx64.efi:</em> This option will create the image as grubx64.efi in /boot/efi/EFI/fedora directory<br />
<em>`cat ~/modules`:</em> This will print all modules listed in the text file ~/modules for grub2-mkimage to process, you can change this to the text file you store your modules</p>

<p>This configuration also assume that your efi images are stored in <code>/boot/efi/EFI/fedora</code> directory, it is a requirement to create an HFS partition and mount it in <code>/boot/efi</code> for my macbook to boot, if you use a different directory under /boot/efi/EFI, change it, e.g. <code>/boot/ef/EFI/redhat</code> if it is stored in <code>/boot/efi/EFI/redhat</code>.</p>

<p>It is best to create a config file in your <code>/boot/efi/EFI/fedora</code> directory if it is not present, by issuing <code>grub2-mkconfig</code> command:</p>

<pre><code># grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg
</code></pre>

<p>This will create a config file in <code>/boot/efi/EFI/fedora/grub.cfg</code>, you may have to adjust the output file path if you specify a different path to grub2-mkimage&#8217;s -p option.</p>

<h2>3. Blessing grubx64.efi image for pure EFI boot</h2>

<p>If you are using reFit or reFind, you can avoid this step as it will find your grub image dynamically, but if you want a pure EFI boot, you have to bless it using Mac OSX&#8217;s <code>bless</code> command. You can either boot into recovery mode or Mac OSX to use this command (it is possible to bless it in your Linux machine by installing certain package, use <code>yum provides bless</code> on Fedora to search for the package that provides the <code>bless</code> command, but I have not personally tested it yet). Personally, I prefer to boot into recovery of Mac OSX Lion to use the bless command because it is much faster.</p>

<p>Once booted, you have to search for the full path of your grub image (grubx64.efi), on my system, it is in /Volumes/EFI_Boot/EFI/, and issue the following command:</p>

<pre><code>$ sudo bless --folder /Volumes/EFI_Boot/EFI/fedora --file /Volumes/EFI_Boot/EFI/fedora/grubx64.efi
</code></pre>

<p>Once done, you can reboot your machine and hold option/alt key to find that your grub image is listed.</p>
]]></content>
  </entry>
  
</feed>
