<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Networking | Ting Wai's Blog]]></title>
  <link href="http://ctingwai.github.com/blog/categories/networking/atom.xml" rel="self"/>
  <link href="http://ctingwai.github.com/"/>
  <updated>2013-06-22T18:00:10+08:00</updated>
  <id>http://ctingwai.github.com/</id>
  <author>
    <name><![CDATA[Chong Ting Wai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enable Internet Access on Raspberry Pi Through Wired Connection]]></title>
    <link href="http://ctingwai.github.com/blog/2013/06/22/enable-internet-access-on-raspberry-pi-through-wired-connection/"/>
    <updated>2013-06-22T17:00:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/06/22/enable-internet-access-on-raspberry-pi-through-wired-connection</id>
    <content type="html"><![CDATA[<p>The first I got my hands on a raspberry pi, I wanted to update its OS to the latest, but the problem is that my RPi is connected to my laptop (using OpenSuse) and I am using SSH to access it (I don't have access to any displays).</p>

<!-- more -->


<h2>Preparation</h2>

<p>First, prepare your SDCard for RPi, there are plenty of resources on how to prepare your SDCard. Then, follow <a href="http://www.raspberrypi.org/archives/3760">this guide</a> to configure your RPi for SSH access from your machine.</p>

<h3>IP Addressing</h3>

<p>For this guide, I am using the following addressing scheme:<br/>
- RPi eth0 => 192.168.10.2/24<br/>
- Laptop eth0 (connected to RPi) => 192.168.10.1/24<br/>
- Laptop wlan0 (connected to router, default gateway) => 192.168.1.6/24<br/>
- Router (Internet access) => 192.168.1.254/24</p>

<h2>Fixing Default Gateway on my Laptop</h2>

<p>When I connected to my RPi, Network Manager replaced my default gateway to <code>eth0</code>, so I am not able to access the Internet after connected to RPi. You verify it by using <code>route</code> command without parameters, if the default line points to eth0, it means your default gateway is overwritten, if it's not, it means you can skip this section, you can verify it by ping-ing <code>www.google.com</code>. To fix this problem, I deleted the default gateway and added a new default gateway that points to my router:</p>

<pre><code>$ sudo /sbin/route del default
$ sudo /sbin/route add default gw 192.168.1.254 dev wlan0
</code></pre>

<p>Verify that your default gateway now points to wlan0 using <code>route</code> command without parameters. Try to ping <code>www.google.com</code> to make sure that your laptop have access to the Internet, your RPi won't be able to access the Internet if your laptop does not.</p>

<h2>Adding Default Gateway to RPi</h2>

<p>Using the <code>route command</code> add a default that points to eth0 interface:</p>

<pre><code>$ sudo route add default gw 192.168.10.1 dev eth0
</code></pre>

<h2>The Problem</h2>

<p>Out of the box without masquerading, once a packet sourced from 192.168.10.0/24 network (my RPi &lt;==> laptop subnet) reaches the router on subnet 192.168.1.0/24, depends on the configuration, it will route or drop the packet. Even if the router successfully routed the packet to the Internet, it will definitely drop the packet, because it does not know where to route the packet for network 192.168.10.0/24 network. So, masquerading seems to be the only solution here.</p>

<h2>Masquerading and Configuration</h2>

<p>Masquerading is like that Linux version of NAT, it translates your internal network to external network (e.g. for Internet access). What it does is that any packets bound for any network from 192.168.10.0/24 subnet will be translated to 192.168.1.0/24 subnet, so my router knows where to route my 192.168.10.0/24 packet.</p>

<p>Since I am using OpenSUSE, I will configure masquerading through its own firewall using YaST.<br/>
1. Open up firewall configuration in YaST and select <code>Interfaces</code><br/>
2. Double click eth0 interface and change it to <code>External Zone</code><br/>
3. Select <code>Masquerading</code> on the left and click <code>Masquerade Networks</code><br/>
4. Add <code>80</code> to <code>requested port</code><br/>
5. Add <code>192.168.1.6</code> (or your wlan0 IP) to <code>Redirect to Masqueraded IP</code><br/>
6. Add <code>81</code> to <code>Redirect to Port</code> or any ports you want your traffic to be translated to, but make sure you are not using any servers on that port<br/>
7. Click <code>Add</code><br/>
8. Select <code>Startup</code> on the left and click <code>Save Settings and Restart Firewall Now</code><br/>
9. Try to ping <code>www.google.com</code> from your RPi, you should get be able to at this point</p>

<h2>REFERENCES</h2>

<ol>
<li><a href="http://www.raspberrypi.org/archives/3760">Using your desktop or laptop screen and keyboard with your Pi</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Juniper VPN on 64 bit Linux]]></title>
    <link href="http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux/"/>
    <updated>2013-05-18T18:21:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/05/18/using-juniper-vpn-on-64-bit-linux</id>
    <content type="html"><![CDATA[<p>When I was supporting a company that uses Juniper VPN with my colleague, I found that Juniper VPN is only supported in 32-bit version of Linux (though it was supported in 64-bit Windows and Mac machine, should ask them why they don't compile it for 64-bit Linux). I have spent hours finding solution to this situation and found one particular solution that just works. Tried <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a> but it didn't work for some unknown reasons.</p>

<!-- more -->


<p>This solution is based on <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a>, all credits goes to him/her.</p>

<h2>Requirements</h2>

<p>To use Juniper VPN, JRE or JDK with web plugins is a must (<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download Here</a>), it does not work with IcedTea and openJDK. We are not using any third party solution, so we have to comply to the Juniper VPN's system requirements.</p>

<h2>Steps</h2>

<p>1. Download Juniper VPN through the software provided by the company. Once the applet is loaded, it should ask you for your root/su password, just press [Enter] twice. It will create <code>.juniper_networks</code> in your home directory.<br/>
<span class='caption-wrapper center'><img class='caption' src='/images/juniper-loading.png' width='' height='' alt=''Juniper VPN Loading Screen'' title=''Juniper VPN Loading Screen''><span class='caption-text'>'Juniper VPN Loading Screen'</span></span>
<span class='caption-wrapper center'><img class='caption' src='/images/juniper-pwdprompt.png' width='' height='' alt=''Juniper VPN Password Prompt'' title=''Juniper VPN Password Prompt''><span class='caption-text'>'Juniper VPN Password Prompt'</span></span></p>

<p>2. Change directory to <code>$HOME/.juniper_networks</code></p>

<pre><code>cd $HOME/.juniper_networks
</code></pre>

<p>3. Remove <code>network_connect</code> directory</p>

<pre><code>rm -rf network_connect
</code></pre>

<p>4. Extract <code>ncLinuxApp.jar</code></p>

<pre><code>unzip ncLinuxApp.jar
</code></pre>

<p>5. Use <code>ldd</code> to find out required libraries for <code>network_connect/libncui.so</code> and <code>zypper wp &lt;library&gt;</code> or <code>yum provides &lt;library&gt;</code> to find out the libraries.</p>

<p>6. Make a binary out of the library</p>

<pre><code>gcc -m32 -Wl,-rpath,`pwd` -o network_connect/ncui network_connect/libncui.so
</code></pre>

<p>7. Set permission and owner/group</p>

<pre><code>sudo chown root:root network_connect/ncui
sudo chmod 6711 network_connect/ncui
</code></pre>

<p>8. Get the certificate</p>

<pre><code>sh network_connect/ncui &lt;your Juniper VPN host&gt; &lt;certificatename&gt;.cer
</code></pre>

<p>9. Make sure that you are still logged into you VPN host, and find your DSID by browsing though your browser's cookie of your VPN site. Search for the cookie named DSID</p>

<p>10. Connect to Juniper VPN</p>

<pre><code>network_connect/ncui -h &lt;you Juniper VPN host&gt; -c DSID=&lt;value obtained in step 9&gt; -f &lt;certificate obtained in step 8&gt;.cer
</code></pre>

<p>11. (Optional) To ease future VPN connections, copy and paste the following script to <code>$HOME/bin/vpnConnect</code></p>

<pre><code>#!/bin/bash

if [ $# -lt 1 ]; then
        echo -e "Usage:\t$0 &lt;DSID&gt;"
        echo -e "\n\tNOTE: DSID can be found in the cookie after you logged into your VPN site"
        exit 0
fi

# Connect to your VPN
~/.juniper_networks/network_connect/ncui -h &lt;your vpn host&gt; -c DSID=$1 -f ~/.juniper_networks/&lt;cert from step 8&gt;.cer
</code></pre>

<p>12. (Continue step 11) Add executable bit <code>chmod +x $HOME/bin/vpnConnect</code></p>

<p>13. (To connect after step 12) Use <code>vpnConnect &lt;your DSID as in step 9&gt;</code> to connect</p>

<h2>Alternative ways for shortening</h2>

<p>Personally I prefer to use a script to shorten my commands, because it allow me to specify usage notes and comments when the usage is not right, but if you are not like me, you can use Linux aliases to shorten it, refer to <code>man alias</code> for usage or Google it =)</p>

<h2>REFERENCES</h2>

<p>1. <a href="http://mad-scientist.net/juniper.html">Mad Scientist's JNC (Juniper Network Connect)</a><br/>
2. <a href="http://dominique.leuenberger.net/blog/2010/07/juniper-vpn-on-opensuse-x86_64/">Dominique Leuenberger's blog on 'Juniper VPN on openSUSE x86_64'</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Permanent DNS Settings for Network Manager]]></title>
    <link href="http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager/"/>
    <updated>2013-04-23T16:39:00+08:00</updated>
    <id>http://ctingwai.github.com/blog/2013/04/23/permanent-dns-settings-for-network-manager</id>
    <content type="html"><![CDATA[<p>DNS settings in Linux are generally stored in <code>/etc/resolv.conf</code> file, you could basically just edit this file to change the DNS settings in any Linux systems. However, the change is not permanent, it will be overwritten by Network Manager when u reconnect or reboot. So, to make the change permanent, there are two methods, Network Manager's dispatcher script method and the immutable flag method.</p>

<!-- more -->


<h2>Using Network Manager's Dispatcher Method</h2>

<p>This solution is based on <a href="https://wiki.archlinux.org/index.php/NetworkManager#Use_OpenDNS_servers">ArchWiki</a>. Basically, the steps are:</p>

<p>1. Become root and create a new file <code>/etc/resolv.conf.googledns</code>.</p>

<p>2. Edit <code>/etc/resolv.conf.googledns</code> and add the following lines:</p>

<pre><code>nameserver 8.8.8.8
nameserver 8.8.4.4
</code></pre>

<p>3. Add the following line to <code>/etc/NetworkManager/dispatcher.d/12-dns_server</code>:</p>

<pre><code>cp -f /etc/resolv.conf.googledns /etc/resolv.conf
</code></pre>

<p>4. Add executable bit to the script:</p>

<pre><code># chmod +x /etc/NetworkManager/dispatcher.d/12-dns_server
</code></pre>

<p>5. Restart Network Manager:</p>

<pre><code># systemctl restart NetworkManager
</code></pre>

<p>What these steps do is just to replace <code>/etc/resolv.conf</code> with the file <code>/etc/resolv.conf.googledns</code> everytime you connect.</p>

<h2>Immutable Flag Method</h2>

<p>You can also try adding <em>immutable</em> flag to <code>/etc/resolv.conf</code> once you have changed the DNS (<code>nameserver</code> field) in <code>/etc/resolv.conf</code> file:</p>

<pre><code># chattr +i /etc/resolv.conf
</code></pre>

<p>Once it's set, not even the root can modify this file, so you have to remove <em>immutable</em> flag first before editing this file:</p>

<pre><code># chattr -i /etc/resolv.conf
</code></pre>

<p>I have not personally tested this method though, there might be some complaints by NetworkManager that it is not able to write to <code>/etc/resolv.conf</code>.</p>
]]></content>
  </entry>
  
</feed>
